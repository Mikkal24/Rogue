!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)B.d(U,I,function(F){return Q[F]}.bind(null,I));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="/build/",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/socketController.js\nconst SocketController = function (socket) {\n  this.socket = socket;\n  this.initialize = state => {\n    state.myPlayer.id = socket.id;\n    this.socket.on("create player", function (player) {\n      if (player.id !== state.myPlayer.id) {\n        console.log(\'creating player\', player.id);\n        var otherPlayer = state.otherPlayers.get();\n        if (otherPlayer) {\n          otherPlayer.anims.play("knight_idle");\n          otherPlayer.setInitialPosition(player.x, player.y, player.id);\n        }\n      }\n    });\n\n    this.socket.on("delete player", function (deletedPlayerID) {\n      if (deletedPlayerID !== state.id) {\n        var thisOne = state.otherPlayers.getChildren().find(function (element) {\n          return element.id === deletedPlayerID;\n        });\n        thisOne.destroy();\n      }\n    });\n\n    this.socket.on("connect", function (initialData) {\n      console.log(\'connected\');\n      state.id = socket.id;\n    });\n\n    this.socket.on("update", function (player) {\n      var moving = false;\n      if (player.id !== state.myPlayer.id) {\n        var thisOne = state.otherPlayers.getChildren().find(function (element) {\n          return element.id === player.id;\n        });\n        if (typeof thisOne !== "undefined") {\n          thisOne.health = player.health;\n\n          if (thisOne.x !== player.x || thisOne.y !== player.y) {\n            thisOne.setPosition(player.x, player.y);\n            moving = true;\n          }\n          if (thisOne.health <= 0) {\n            thisOne.setAnimation(\'knight_death\');\n          } else if (player.attacking) {\n            thisOne.setAnimation("knight_slash");\n            thisOne.attacking = true;\n          } else if (player.blocking) {\n            thisOne.setAnimation("knight_block");\n            thisOne.blocking = true;\n          } else if (moving) {\n            thisOne.attacking = false;\n            thisOne.blocking = false;\n            thisOne.setAnimation("knight_walk");\n          } else {\n            thisOne.attacking = false;\n            thisOne.blocking = false;\n            thisOne.setAnimation("knight_idle");\n          }\n\n          if (thisOne.flipState !== player.flipState) {\n            thisOne.flipState = player.flipState;\n            thisOne.toggleFlipX();\n          }\n        }\n      }\n    });\n\n    this.socket.on("attack", function (player) {});\n\n    socket.on(\'disconnect\', function () {\n      // close everything down\n      state.myPlayer = {};\n    });\n  };\n};\n\n// export const SocketListeners = function(socket, state) {\n\n// };\n// CONCATENATED MODULE: ./src/Tweens/tweens.js\nvar tweensLibrary = {\n  setKnockBackTween: function (target) {\n    target.knockback = this.tweens.add({\n      targets: target,\n      x: {\n        value: () => target.x + target.knockbackDistance,\n        ease: "Power1"\n      },\n      duration: 500,\n      paused: true,\n      onComplete: () => {\n        console.log(\'attempting to reset tween\');\n        console.log(target);\n        target.setKnockBackTween(target);\n      }\n    });\n  }\n};\n// CONCATENATED MODULE: ./src/GameObjects/Player.js\n\n\n\nconst Player_Player = new Phaser.Class({\n  Extends: Phaser.GameObjects.Sprite,\n\n  initialize: function Player(scene) {\n    Phaser.GameObjects.Sprite.call(this, scene, 0, 0, "nothing");\n    this.setActive(true);\n    this.setVisible(true);\n    this.key = "knight_idle";\n    this.health = 100;\n    this.knockBackDistance = 50;\n    this.flipState = false;\n    this.attacking = false;\n    this.blocking = false;\n    this.moving = false;\n    this.injured = false;\n    this.setKnockBackTween = tweensLibrary.setKnockBackTween.bind(scene);\n    this.knockback = this.setKnockBackTween(this);\n  },\n\n  setInitialPosition: function (x, y, id) {\n    this.setPosition(x, y);\n    this.id = id;\n  },\n\n  setNewPosition: function (x, y) {\n    this.id = id;\n    this.setPosition(x, y);\n  },\n\n  setAnimation: function (key) {\n    if (this.key !== key) {\n      this.play(key);\n      this.key = key;\n    }\n  },\n\n  takeDamage: function (damage) {\n    this.health -= damage;\n  },\n\n  flip: function (newFlipState, socket) {\n    if (newFlipState !== this.flipState) {\n      this.flipState = newFlipState;\n      this.toggleFlipX();\n      socket.emit("flip", { id: this.id, flipState: this.flipState });\n    }\n  },\n\n  updateAnimations: function () {\n    if (this.health <= 0) {\n      this.setAnimation("knight_death");\n    } else if (this.attacking) {\n      this.setAnimation("knight_slash");\n    } else if (this.blocking) {\n      this.setAnimation("knight_block");\n    } else if (this.moving) {\n      this.setAnimation("knight_walk");\n    } else {\n      this.setAnimation("knight_idle");\n    }\n  },\n\n  updateServerWithPosition(socket) {\n    socket.emit("move player", {\n      x: this.x,\n      y: this.y,\n      health: this.health,\n      id: this.id\n    });\n  },\n\n  update: function (socket) {\n    this.updateAnimations();\n    this.updateServerWithPosition(socket);\n  }\n});\n// CONCATENATED MODULE: ./src/Animations/knightAnimations.js\nlet KnightAnimations = {};\n\n/* harmony default export */ var knightAnimations = (KnightAnimations = {\n  load(context) {\n    context.load.spritesheet("knight_idling", "assets/knight/idle.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 4\n    });\n    context.load.spritesheet("knight_walking", "assets/knight/walk.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 8\n    });\n    context.load.spritesheet("knight_slashing", "assets/knight/slash.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 10\n    });\n    context.load.spritesheet("knight_blocking", "assets/knight/block.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 7\n    });\n    context.load.spritesheet("knight_dieing", "assets/knight/death.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 9\n    });\n  },\n\n  create(context) {\n    context.anims.create({\n      key: "knight_idle",\n      frames: context.anims.generateFrameNumbers("knight_idling", { start: 0, end: 3 }),\n      frameRate: 2,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "knight_walk",\n      frames: context.anims.generateFrameNumbers("knight_walking", { start: 0, end: 7 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "knight_slash",\n      frames: context.anims.generateFrameNumbers("knight_slashing", { start: 0, end: 9 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "knight_block",\n      frames: context.anims.generateFrameNumbers("knight_blocking", { start: 0, end: 6 }),\n      frameRate: 24\n    });\n\n    context.anims.create({\n      key: "knight_death",\n      frames: context.anims.generateFrameNumbers("knight_dieing", { start: 0, end: 8 }),\n      frameRate: 24\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/Animations/skeletonAnimations.js\nlet SkeletonAnimations = {};\n\n/* harmony default export */ var skeletonAnimations = (SkeletonAnimations = {\n  load(context) {\n    context.load.spritesheet("skeleton_idling", "assets/skeleton/idle.png", {\n      frameWidth: 24,\n      frameHeight: 32,\n      endFrame: 11\n    });\n    context.load.spritesheet("skeleton_walking", "assets/skeleton/walk.png", {\n      frameWidth: 22,\n      frameHeight: 33,\n      endFrame: 13\n    });\n    context.load.spritesheet("skeleton_slashing", "assets/skeleton/attack.png", {\n      frameWidth: 43,\n      frameHeight: 37,\n      endFrame: 18\n    });\n    context.load.spritesheet("skeleton_damaged", "assets/skeleton/takeDamage.png", {\n      frameWidth: 30,\n      frameHeight: 32,\n      endFrame: 8\n    });\n    context.load.spritesheet("skeleton_dieing", "assets/skeleton/death.png", {\n      frameWidth: 33,\n      frameHeight: 32,\n      endFrame: 15\n    });\n    context.load.spritesheet("skeleton_react", "assets/skeleton/react.png", {\n      frameWidth: 30,\n      frameHeight: 32,\n      endFrame: 4\n    });\n  },\n\n  create(context) {\n    context.anims.create({\n      key: "skeleton_idle",\n      frames: context.anims.generateFrameNumbers("skeleton_idling", { start: 0, end: 10 }),\n      frameRate: 2,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "skeleton_walk",\n      frames: context.anims.generateFrameNumbers("skeleton_walking", { start: 0, end: 12 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "skeleton_slash",\n      frames: context.anims.generateFrameNumbers("skeleton_slashing", { start: 0, end: 17 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "skeleton_damaged",\n      frames: context.anims.generateFrameNumbers("skeleton_damaged", { start: 0, end: 7 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "skeleton_death",\n      frames: context.anims.generateFrameNumbers("skeleton_dieing", { start: 0, end: 14 }),\n      frameRate: 24,\n      repeat: -1\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/GameObjects/Skeleton.js\nconst Skeleton = new Phaser.Class({\n    Extends: Phaser.GameObjects.Sprite,\n    initialize: function Skeleton(scene) {\n        Phaser.GameObjects.Sprite.call(this, scene, 0, 0, "nothing");\n        this.setActive(true);\n        this.setVisible(true);\n        this.key = "skeleton_idle";\n        this.setPosition(200, 200);\n        this.speed = 50;\n    },\n\n    move: function (target) {\n        if (target.x > this.x) {\n            this.setVelocityX(50);\n        } else if (target.x < this.y) {\n            this.setVelocityX(-50);\n        }\n    }\n\n});\n// CONCATENATED MODULE: ./src/state.js\n// game state constructor\n\n\n\n\nconst State = function () {\n  this.id = "";\n  this.x = 200;\n  this.y = 200;\n  this.attackTimer = null;\n  this.initialOtherPlayers = [];\n  this.otherPlayers = {};\n  this.skeletons = {};\n  this.player = {};\n  this.myPlayer = {};\n  this.moving = false;\n  this.health = 100;\n  this.attack = false;\n  this.block = false;\n  this.disableInput = false;\n  this.knockback = null;\n  this.keys = {};\n\n  this.updatePosition = (x, y) => {\n    this.x = x;\n    this.y = y;\n  };\n\n  this.initialize = (context, socket) => {\n    console.log(\'initializing state\');\n    this.initializePlayer(context, socket);\n    this.initializeOtherPlayers(context);\n    this.initializeSkeletons(context);\n    this.initializeKeys(context);\n  };\n\n  this.initializeKeys = context => {\n    this.keys.W = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    this.keys.A = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n    this.keys.S = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    this.keys.D = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n  };\n\n  this.initializePlayer = (context, socket) => {\n    let knockbacktween = tweensLibrary.setKnockBackTween.bind(context);\n    this.player = context.physics.add.group({\n      classType: Player_Player,\n      maxSize: 1,\n      collideWorldBounds: true\n    });\n\n    this.myPlayer = this.player.get();\n    this.myPlayer.play("knight_idle");\n    this.myPlayer.setInitialPosition(this.x, this.y, socket.id);\n    knockbacktween(this.myPlayer);\n    console.log("PLAYER", this.myPlayer.health);\n    socket.emit("create player", {\n      x: this.myPlayer.x,\n      y: this.myPlayer.y,\n      health: this.myPlayer.health,\n      id: socket.id\n    });\n  };\n\n  this.initializeOtherPlayers = context => {\n    this.otherPlayers = context.physics.add.group({\n      classType: Player_Player,\n      maxSize: 100,\n      bounceX: 1,\n      collideWorldBounds: true\n    });\n  };\n\n  this.initializeSkeletons = context => {\n    this.skeletons = context.physics.add.group({\n      classType: Skeleton,\n      maxSize: 100,\n      bounceX: 1,\n      collideWorldBounds: true\n    });\n  };\n};\n// CONCATENATED MODULE: ./src/Maps/tryHardMap.js\nconst tryHardmap = {\n  load: context => {\n    context.load.tilemapTiledJSON("map", "assets/map/tryhard.json");\n    context.load.spritesheet("background", "assets/map/assets/background.png", {\n      frameWidth: 8,\n      frameHeight: 8\n    });\n    context.load.spritesheet("blue_generic", "assets/map/assets/blue_generic.png", {\n      frameWidth: 8,\n      frameHeight: 8\n    });\n  },\n\n  create: context => {\n    context.map = context.make.tilemap({ key: "map" });\n    context.mainTileSet = context.map.addTilesetImage("blue_generic");\n    context.BackgroundTileSet = context.map.addTilesetImage("blue_generic");\n    context.image_backgroundTileSet = context.map.addTilesetImage("background");\n    context.image_backgroundLayer = context.map.createDynamicLayer("image_background", context.image_backgroundTileSet, 0, 0);\n    context.BackgroundLayer = context.map.createDynamicLayer("Background", context.BackgroundTileSet, 0, 0);\n    context.mainLayer = context.map.createDynamicLayer("MAIN", context.mainTileSet, 0, 0);\n\n    context.mainLayer.setCollisionByExclusion([-1]);\n\n    // bounds\n    context.physics.world.bounds.width = context.mainLayer.width;\n    context.physics.world.bounds.height = context.mainLayer.height;\n  }\n};\n// CONCATENATED MODULE: ./src/index.js\n// import "phaser";\n// import "./socketController";\n\n\n\n\n\n\n\n\nvar config = {\n  type: Phaser.AUTO,\n  parent: "phaser-example",\n  width: 400,\n  height: 300,\n  physics: {\n    default: "arcade",\n    arcade: {\n      gravity: { y: 300 },\n      debug: true\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\n\nvar game = new Phaser.Game(config);\nvar state = new State();\nvar _this;\nvar src_socket = io();\nvar socketController = new SocketController(src_socket);\nvar _skeleton;\n\n/**\r\n * THIS IS THE PRE-LOAD FUNCTION\r\n */\nfunction preload() {\n  tryHardmap.load(this);\n  knightAnimations.load(this);\n  skeletonAnimations.load(this);\n}\n\n/**\r\n * THIS IS THE CREATE FUNCTION\r\n */\nfunction create() {\n\n  tryHardmap.create(this);\n  knightAnimations.create(this);\n  skeletonAnimations.create(this);\n\n  state.initialize(this, src_socket);\n  this.physics.add.collider(state.myPlayer, this.mainLayer);\n  this.physics.add.collider(state.otherPlayers, this.mainLayer);\n  this.physics.add.collider(state.skeletons, this.mainLayer);\n  _skeleton = state.skeletons.get();\n  _skeleton.anims.play("skeleton_walk");\n  getInitialPlayers();\n  this.cameras.main.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);;\n  this.cameras.main.startFollow(state.myPlayer);\n\n  this.input.on("pointerdown", pointer => {\n    if (pointer.buttons === 1) {\n      state.myPlayer.attacking = true;\n      src_socket.emit("attack", { id: state.myPlayer.id });\n    } else if (pointer.buttons === 2) {\n      state.myPlayer.blocking = true;\n      src_socket.emit("block", { id: state.myPlayer.id });\n    }\n  });\n\n  this.input.on("pointerup", function (pointer) {\n    state.myPlayer.attacking = false;\n    state.myPlayer.blocking = false;\n    src_socket.emit("block release", { id: state.myPlayer.id });\n    src_socket.emit("attack release", { id: state.myPlayer.id });\n  });\n\n  this.physics.add.overlap(state.myPlayer, state.otherPlayers, playerCollision);\n\n  socketController.initialize(state);\n}\n\n/**\r\n * THIS IS THE UPDATE FUNCTION\r\n */\n\nfunction update(time, delta) {\n  if (state.myPlayer.health < 0) return;\n\n  state.myPlayer.moving = false;\n\n  // keyboard listeners\n  if (state.keys.A.isDown) {\n    state.player.setVelocityX(-160);\n    state.myPlayer.flip(true, src_socket);\n    state.myPlayer.moving = true;\n  } else if (state.keys.D.isDown) {\n    state.player.setVelocityX(160);\n    state.myPlayer.flip(false, src_socket);\n    state.myPlayer.moving = true;\n  } else {\n    state.player.setVelocityX(0);\n  }\n  // Jump\n  if (state.keys.W.isDown && state.myPlayer.body.onFloor()) {\n    state.player.setVelocityY(-100);\n  }\n\n  state.myPlayer.update(src_socket);\n\n  _skeleton.x < state.myPlayer.x ? state.skeletons.setVelocityX(50) : state.skeletons.setVelocityX(-50);\n  // _skeleton.move(state.myPlayer);\n}\n\n/**\r\n * UTIL functions\r\n */\n\nfunction getInitialPlayers() {\n  var request = new XMLHttpRequest();\n  request.open("GET", "/initialize", false);\n  request.send(null);\n\n  if (request.status === 200) {\n    state.initialOtherPlayers = JSON.parse(request.response);\n    for (var key in state.initialOtherPlayers) {\n      if (key !== state.myPlayer.id) {\n        var otherPlayer = state.otherPlayers.get();\n        if (otherPlayer) {\n          otherPlayer.anims.play("knight_idle");\n          otherPlayer.setInitialPosition(state.initialOtherPlayers[key].x, state.initialOtherPlayers[key].y, key);\n        }\n      }\n    }\n  }\n}\n\nfunction playerCollision(player, otherPlayer) {\n  if (!player.injured && player.health > 0) {\n    if (otherPlayer.attacking && !player.blocking) {\n      player.takeDamage(10);\n      if (otherPlayer.flipState) {\n        state.myPlayer.knockbackDistance = -50;\n        state.myPlayer.knockback.play();\n      } else {\n        state.myPlayer.knockbackDistance = 50;\n        state.myPlayer.knockback.play();\n      }\n      player.injured = true;\n      setTimeout(() => {\n        player.injured = false;\n      }, 1000);\n    } else if (otherPlayer.attacking && player.blocking) {}\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);