!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:U})},B.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="/build/",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/GameObjects/Player.js\nconst Player = new Phaser.Class({\n  Extends: Phaser.GameObjects.Sprite,\n\n  initialize: function Player(scene) {\n    Phaser.GameObjects.Sprite.call(this, scene, 0, 0, "nothing");\n  },\n\n  setInitialPosition: function (x, y, id) {\n    this.setPosition(x, y);\n    this.setActive(true);\n    this.setVisible(true);\n    this.id = id;\n    this.key = "idle";\n    this.health = 100;\n    this.knockBackDistance = 50;\n    this.flipState = false;\n    this.attacking = false;\n    this.blocking = false;\n    this.moving = false;\n    this.injured = false;\n  },\n\n  setNewPosition: function (x, y) {\n    this.setPosition(x, y);\n  },\n\n  setAnimation: function (key) {\n    if (this.key !== key) {\n      this.play(key);\n      this.key = key;\n    }\n  },\n\n  takeDamage: function (damage) {\n    this.health -= damage;\n  },\n\n  flip: function (newFlipState, socket) {\n    if (newFlipState !== this.flipState) {\n      this.flipState = newFlipState;\n      this.toggleFlipX();\n      socket.emit("flip", { id: this.id, flipState: this.flipState });\n    }\n  },\n\n  updateAnimations: function () {\n    if (this.attacking) {\n      this.setAnimation("slash");\n    } else if (this.blocking) {\n      this.setAnimation("block");\n      // blockCollider(myPlayer);\n    } else if (this.moving) {\n      this.setAnimation("walk");\n    } else {\n      this.setAnimation("idle");\n    }\n  },\n\n  update: function () {\n    this.updateAnimations();\n  }\n});\n// CONCATENATED MODULE: ./src/Animations/knightAnimations.js\nlet KnightAnimations = {};\n\n/* harmony default export */ var knightAnimations = (KnightAnimations = {\n  load(context) {\n    context.load.spritesheet("idling", "assets/knight/idle.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 4\n    });\n    context.load.spritesheet("walking", "assets/knight/walk.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 8\n    });\n    context.load.spritesheet("slashing", "assets/knight/slash.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 10\n    });\n    context.load.spritesheet("blocking", "assets/knight/block.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 7\n    });\n  },\n\n  create(context) {\n    context.anims.create({\n      key: "idle",\n      frames: context.anims.generateFrameNumbers("idling", { start: 0, end: 3 }),\n      frameRate: 2,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "walk",\n      frames: context.anims.generateFrameNumbers("walking", { start: 0, end: 7 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "slash",\n      frames: context.anims.generateFrameNumbers("slashing", { start: 0, end: 9 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "block",\n      frames: context.anims.generateFrameNumbers("blocking", { start: 0, end: 6 }),\n      frameRate: 24\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/state.js\n// game state constructor\n\n\nconst State = function () {\n  this.id = "";\n  this.x = 200;\n  this.y = 200;\n  this.attackTimer = null;\n  this.initialOtherPlayers = [];\n  this.otherPlayers = {};\n  this.player = {};\n  this.myPlayer = {};\n  this.moving = false;\n  this.attack = false;\n  this.block = false;\n  this.disableInput = false;\n  this.knockback = null;\n  this.keys = {};\n\n  this.updatePosition = (x, y) => {\n    this.x = x;\n    this.y = y;\n  };\n\n  this.initialize = context => {\n    this.initializePlayer(context);\n    this.initializeOtherPlayers(context);\n  };\n\n  this.initializePlayer = (context, socket) => {\n    this.player = context.physics.add.group({\n      classType: Player,\n      maxSize: 1,\n      collideWorldBounds: true\n    });\n\n    this.myPlayer = this.player.get();\n\n    socket.emit("create player", {\n      x: self.x,\n      y: self.y,\n      id: socket.id\n    });\n  };\n\n  this.initializeOtherPlayers = context => {\n    this.otherPlayers = context.physics.add.group({\n      classType: Player,\n      maxSize: 100,\n      bounceX: 1,\n      collideWorldBounds: true\n    });\n  };\n};\n// CONCATENATED MODULE: ./src/socketController.js\nconst SocketListeners = function (socket, state) {\n  socket.on("create player", function (player) {\n    if (player.id !== state.myPlayer.id) {\n      console.log(\'creating player\', player.id);\n      var otherPlayer = state.otherPlayers.get();\n      if (otherPlayer) {\n        otherPlayer.anims.play("idle");\n        otherPlayer.setInitialPosition(player.x, player.y, player.id);\n      }\n    }\n  });\n\n  socket.on("delete player", function (deletedPlayerID) {\n    if (deletedPlayerID !== state.id) {\n      var thisOne = state.otherPlayers.getChildren().find(function (element) {\n        return element.id === deletedPlayerID;\n      });\n      thisOne.destroy();\n    }\n  });\n\n  socket.on("update", function (player) {\n    var moving = false;\n    if (player.id !== state.id) {\n      var thisOne = state.otherPlayers.getChildren().find(function (element) {\n        return element.id === player.id;\n      });\n      if (typeof thisOne !== "undefined") {\n        if (thisOne.x !== player.x || thisOne.y !== player.y) {\n          thisOne.setPosition(player.x, player.y);\n          moving = true;\n        }\n\n        if (player.attacking) {\n          thisOne.setAnimation("slash");\n          thisOne.attacking = true;\n        } else if (player.blocking) {\n          thisOne.setAnimation("block");\n          thisOne.blocking = true;\n        } else if (moving) {\n          thisOne.attacking = false;\n          thisOne.blocking = false;\n          thisOne.setAnimation("walk");\n        } else {\n          thisOne.attacking = false;\n          thisOne.blocking = false;\n          thisOne.setAnimation("idle");\n        }\n\n        if (thisOne.flipState !== player.flipState) {\n          thisOne.flipState = player.flipState;\n          thisOne.toggleFlipX();\n        }\n      }\n    }\n  });\n\n  socket.on("attack", function (player) {});\n};\n// CONCATENATED MODULE: ./src/Maps/tryHardMap.js\nconst tryHardmap = {\n  create: context => {\n    context.map = context.make.tilemap({ key: "map" });\n    context.mainTileSet = context.map.addTilesetImage("blue_generic");\n    context.BackgroundTileSet = context.map.addTilesetImage("blue_generic");\n    context.image_backgroundTileSet = context.map.addTilesetImage("background");\n    context.image_backgroundLayer = context.map.createDynamicLayer("image_background", context.image_backgroundTileSet, 0, 0);\n    context.BackgroundLayer = context.map.createDynamicLayer("Background", context.BackgroundTileSet, 0, 0);\n    context.mainLayer = context.map.createDynamicLayer("MAIN", context.mainTileSet, 0, 0);\n\n    context.mainLayer.setCollisionByExclusion([-1]);\n\n    // bounds\n    context.physics.world.bounds.width = context.mainLayer.width;\n    context.physics.world.bounds.height = context.mainLayer.height;\n  }\n};\n// CONCATENATED MODULE: ./src/index.js\n// import "phaser";\n// import "./socketController";\n\n\n\n\n\n\nvar config = {\n  type: Phaser.AUTO,\n  parent: "phaser-example",\n  width: 400,\n  height: 300,\n  physics: {\n    default: "arcade",\n    arcade: {\n      gravity: { y: 300 },\n      debug: true\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\n\nvar game = new Phaser.Game(config);\nvar state = new State();\nvar _this;\nvar src_socket = io();\nsrc_socket.on("connect", function (initialData) {\n  state.id = src_socket.id;\n  console.log(state.id);\n});\n\n/**\r\n * THIS IS THE PRE-LOAD FUNCTION\r\n */\nfunction preload() {\n  knightAnimations.load(this);\n\n  // load mapthis.load.tilemapTiledJSON("test2", "assets/testmap.json");\n  this.load.tilemapTiledJSON("map", "assets/map/tryhard.json");\n  this.load.spritesheet("background", "assets/map/assets/background.png", {\n    frameWidth: 8,\n    frameHeight: 8\n  });\n  this.load.spritesheet("blue_generic", "assets/map/assets/blue_generic.png", {\n    frameWidth: 8,\n    frameHeight: 8\n  });\n}\n\n/**\r\n * THIS IS THE CREATE FUNCTION\r\n */\nfunction create() {\n  _this = this;\n  /** Create MAP */\n  tryHardmap.create(this);\n\n  // animations\n  knightAnimations.create(this);\n\n  // Initialize Player\n  state.initializePlayer(this, src_socket);\n\n  // establish camera\n  this.cameras.main.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);\n\n  // state.myPlayer = state.player.get();\n  this.physics.add.collider(state.myPlayer, this.mainLayer);\n  this.cameras.main.startFollow(state.myPlayer);\n\n  if (state.myPlayer) {\n    state.myPlayer.play("idle");\n    state.myPlayer.setInitialPosition(state.x, state.y, src_socket.id);\n\n    setKnockBackTween();\n  }\n\n  // Initialize Other Players\n  state.initializeOtherPlayers(this, src_socket);\n  this.physics.add.collider(state.otherPlayers, this.mainLayer);\n\n  getInitialPlayers();\n\n  // key listeners\n  state.keys.W = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n  state.keys.A = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n  state.keys.S = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n  state.keys.D = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n  this.input.on("pointerdown", pointer => {\n    if (pointer.buttons === 1) {\n      state.myPlayer.attacking = true;\n      src_socket.emit("attack", { id: state.myPlayer.id });\n    } else if (pointer.buttons === 2) {\n      state.myPlayer.blocking = true;\n      src_socket.emit("block", { id: state.myPlayer.id });\n    }\n  });\n\n  this.input.on("pointerup", function (pointer) {\n    state.myPlayer.attacking = false;\n    state.myPlayer.blocking = false;\n    src_socket.emit("block release", { id: state.myPlayer.id });\n    src_socket.emit("attack release", { id: state.myPlayer.id });\n  });\n\n  this.physics.add.overlap(state.myPlayer, state.otherPlayers, playerCollision);\n\n  SocketListeners(src_socket, state);\n}\n\n/**\r\n * THIS IS THE UPDATE FUNCTION\r\n */\n\nfunction update(time, delta) {\n  state.myPlayer.moving = false;\n\n  // keyboard listeners\n  if (state.keys.A.isDown) {\n    state.player.setVelocityX(-160);\n    state.myPlayer.flip(true, src_socket);\n    state.myPlayer.moving = true;\n  } else if (state.keys.D.isDown) {\n    state.player.setVelocityX(160);\n    state.myPlayer.flip(false, src_socket);\n    state.myPlayer.moving = true;\n  } else {\n    state.player.setVelocityX(0);\n  }\n  // Jump\n  if (state.keys.W.isDown && state.myPlayer.body.onFloor()) {\n    state.player.setVelocityY(-250);\n  }\n\n  state.myPlayer.update();\n  src_socket.emit("move player", {\n    x: state.myPlayer.x,\n    y: state.myPlayer.y,\n    id: state.myPlayer.id\n  });\n}\n\nfunction getInitialPlayers() {\n  var request = new XMLHttpRequest();\n  request.open("GET", "/initialize", false);\n  request.send(null);\n\n  if (request.status === 200) {\n    state.initialOtherPlayers = JSON.parse(request.response);\n\n    for (var key in state.initialOtherPlayers) {\n      if (key !== state.id) {\n        var otherPlayer = state.otherPlayers.get();\n        if (otherPlayer) {\n          otherPlayer.anims.play("idle");\n          otherPlayer.setInitialPosition(state.initialOtherPlayers[key].x, state.initialOtherPlayers[key].y, key);\n        }\n      }\n    }\n  }\n}\n\nfunction playerCollision(player, otherPlayer) {\n  if (!player.injured) {\n    if (otherPlayer.attacking && !player.blocking) {\n      console.log("knocback");\n      player.health -= 10;\n      if (otherPlayer.flipState) {\n        state.myPlayer.knockbackDistance = -50;\n        state.knockback.play();\n        console.log("knockback");\n      } else {\n        state.myPlayer.knockbackDistance = 50;\n        state.knockback.play();\n      }\n      player.injured = true;\n      setTimeout(() => {\n        player.injured = false;\n      }, 1000);\n      //hit detected\n    } else if (otherPlayer.attacking && player.blocking) {\n      //blocked\n    }\n  }\n}\n\nfunction setKnockBackTween(tween, targets, myImage) {\n  state.knockback = _this.tweens.add({\n    targets: state.myPlayer,\n    x: {\n      value: () => state.myPlayer.x + state.myPlayer.knockbackDistance,\n      ease: "Power1"\n    },\n    duration: 500,\n    paused: true,\n    onComplete: setKnockBackTween\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);