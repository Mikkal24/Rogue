!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)B.d(U,I,function(F){return Q[F]}.bind(null,I));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="/build/",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/socketController.js\nconst SocketController = function (socket) {\n  this.socket = socket;\n  this.initialize = state => {\n    state.myPlayer.id = socket.id;\n    this.socket.on("create player", function (player) {\n      if (player.id !== state.myPlayer.id) {\n        console.log(\'creating player\', player.id);\n        var otherPlayer = state.otherPlayers.get();\n        if (otherPlayer) {\n          otherPlayer.anims.play("idle");\n          otherPlayer.setInitialPosition(player.x, player.y, player.id);\n        }\n      }\n    });\n\n    this.socket.on("delete player", function (deletedPlayerID) {\n      if (deletedPlayerID !== state.id) {\n        var thisOne = state.otherPlayers.getChildren().find(function (element) {\n          return element.id === deletedPlayerID;\n        });\n        thisOne.destroy();\n      }\n    });\n\n    this.socket.on("connect", function (initialData) {\n      console.log(\'connected\');\n      state.id = socket.id;\n    });\n\n    this.socket.on("update", function (player) {\n      var moving = false;\n      if (player.id !== state.myPlayer.id) {\n        var thisOne = state.otherPlayers.getChildren().find(function (element) {\n          return element.id === player.id;\n        });\n        if (typeof thisOne !== "undefined") {\n          if (thisOne.health < 0) {\n            thisOne.setAnimation(\'death\');\n            return;\n          }\n          if (thisOne.x !== player.x || thisOne.y !== player.y) {\n            thisOne.setPosition(player.x, player.y);\n            moving = true;\n          }\n          if (player.attacking) {\n            thisOne.setAnimation("slash");\n            thisOne.attacking = true;\n          } else if (player.blocking) {\n            thisOne.setAnimation("block");\n            thisOne.blocking = true;\n          } else if (moving) {\n            thisOne.attacking = false;\n            thisOne.blocking = false;\n            thisOne.setAnimation("walk");\n          } else {\n            thisOne.attacking = false;\n            thisOne.blocking = false;\n            thisOne.setAnimation("idle");\n          }\n\n          if (thisOne.flipState !== player.flipState) {\n            thisOne.flipState = player.flipState;\n            thisOne.toggleFlipX();\n          }\n        }\n      }\n    });\n\n    this.socket.on("attack", function (player) {});\n  };\n};\n\n// export const SocketListeners = function(socket, state) {\n\n// };\n// CONCATENATED MODULE: ./src/Tweens/tweens.js\nvar tweensLibrary = {\n  setKnockBackTween: function (target) {\n    target.knockback = this.tweens.add({\n      targets: target,\n      x: {\n        value: () => target.x + target.knockbackDistance,\n        ease: "Power1"\n      },\n      duration: 500,\n      paused: true,\n      onComplete: () => {\n        console.log(\'attempting to reset tween\');\n        console.log(target);\n        target.setKnockBackTween(target);\n      }\n    });\n  }\n};\n// CONCATENATED MODULE: ./src/GameObjects/Player.js\n\n\n\nconst Player_Player = new Phaser.Class({\n  Extends: Phaser.GameObjects.Sprite,\n\n  initialize: function Player(scene) {\n    Phaser.GameObjects.Sprite.call(this, scene, 0, 0, "nothing");\n    this.setActive(true);\n    this.setVisible(true);\n    this.key = "idle";\n    this.health = 100;\n    this.knockBackDistance = 50;\n    this.flipState = false;\n    this.attacking = false;\n    this.blocking = false;\n    this.moving = false;\n    this.injured = false;\n    this.setKnockBackTween = tweensLibrary.setKnockBackTween.bind(scene);\n    this.knockback = this.setKnockBackTween(this);\n  },\n\n  setInitialPosition: function (x, y, id) {\n    this.setPosition(x, y);\n    this.id = id;\n  },\n\n  setNewPosition: function (x, y) {\n    this.id = id;\n    this.setPosition(x, y);\n  },\n\n  setAnimation: function (key) {\n    if (this.key !== key) {\n      this.play(key);\n      this.key = key;\n    }\n  },\n\n  takeDamage: function (damage) {\n    this.health -= damage;\n  },\n\n  flip: function (newFlipState, socket) {\n    if (newFlipState !== this.flipState) {\n      this.flipState = newFlipState;\n      this.toggleFlipX();\n      socket.emit("flip", { id: this.id, flipState: this.flipState });\n    }\n  },\n\n  updateAnimations: function () {\n    if (this.attacking) {\n      this.setAnimation("slash");\n    } else if (this.blocking) {\n      this.setAnimation("block");\n      // blockCollider(myPlayer);\n    } else if (this.moving) {\n      this.setAnimation("walk");\n    } else {\n      this.setAnimation("idle");\n    }\n  },\n\n  updateServerWithPosition(socket) {\n    socket.emit("move player", {\n      x: this.x,\n      y: this.y,\n      id: this.id\n    });\n  },\n\n  update: function (socket) {\n    this.updateAnimations();\n    this.updateServerWithPosition(socket);\n  }\n});\n// CONCATENATED MODULE: ./src/Animations/knightAnimations.js\nlet KnightAnimations = {};\n\n/* harmony default export */ var knightAnimations = (KnightAnimations = {\n  load(context) {\n    context.load.spritesheet("idling", "assets/knight/idle.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 4\n    });\n    context.load.spritesheet("walking", "assets/knight/walk.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 8\n    });\n    context.load.spritesheet("slashing", "assets/knight/slash.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 10\n    });\n    context.load.spritesheet("blocking", "assets/knight/block.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 7\n    });\n    context.load.spritesheet("dieing", "assets/knight/death.png", {\n      frameWidth: 42,\n      frameHeight: 42,\n      endFrame: 9\n    });\n  },\n\n  create(context) {\n    context.anims.create({\n      key: "idle",\n      frames: context.anims.generateFrameNumbers("idling", { start: 0, end: 3 }),\n      frameRate: 2,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "walk",\n      frames: context.anims.generateFrameNumbers("walking", { start: 0, end: 7 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "slash",\n      frames: context.anims.generateFrameNumbers("slashing", { start: 0, end: 9 }),\n      frameRate: 24,\n      repeat: -1\n    });\n\n    context.anims.create({\n      key: "block",\n      frames: context.anims.generateFrameNumbers("blocking", { start: 0, end: 6 }),\n      frameRate: 24\n    });\n\n    context.anims.create({\n      key: "death",\n      frames: context.anims.generateFrameNumbers("dieing", { start: 0, end: 8 }),\n      frameRate: 24\n    });\n  }\n});\n// CONCATENATED MODULE: ./src/state.js\n// game state constructor\n\n\n\nconst State = function () {\n  this.id = "";\n  this.x = 200;\n  this.y = 200;\n  this.attackTimer = null;\n  this.initialOtherPlayers = [];\n  this.otherPlayers = {};\n  this.player = {};\n  this.myPlayer = {};\n  this.moving = false;\n  this.health = 100;\n  this.attack = false;\n  this.block = false;\n  this.disableInput = false;\n  this.knockback = null;\n  this.keys = {};\n\n  this.updatePosition = (x, y) => {\n    this.x = x;\n    this.y = y;\n  };\n\n  this.initialize = (context, socket) => {\n    this.initializePlayer(context, socket);\n    this.initializeOtherPlayers(context, socket);\n    this.initializeKeys(context);\n  };\n\n  this.initializeKeys = context => {\n    this.keys.W = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    this.keys.A = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n    this.keys.S = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    this.keys.D = context.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n  };\n\n  this.initializePlayer = (context, socket) => {\n    let knockbacktween = tweensLibrary.setKnockBackTween.bind(context);\n    this.player = context.physics.add.group({\n      classType: Player_Player,\n      maxSize: 1,\n      collideWorldBounds: true\n    });\n\n    this.myPlayer = this.player.get();\n    this.myPlayer.play("idle");\n    this.myPlayer.setInitialPosition(this.x, this.y, socket.id);\n    knockbacktween(this.myPlayer);\n    socket.emit("create player", {\n      x: this.myPlayer.x,\n      y: this.myPlayer.y,\n      health: this.myPlayer.health,\n      id: socket.id\n    });\n  };\n\n  this.initializeOtherPlayers = context => {\n    this.otherPlayers = context.physics.add.group({\n      classType: Player_Player,\n      maxSize: 100,\n      bounceX: 1,\n      collideWorldBounds: true\n    });\n  };\n};\n// CONCATENATED MODULE: ./src/Maps/tryHardMap.js\nconst tryHardmap = {\n  load: context => {\n    context.load.tilemapTiledJSON("map", "assets/map/tryhard.json");\n    context.load.spritesheet("background", "assets/map/assets/background.png", {\n      frameWidth: 8,\n      frameHeight: 8\n    });\n    context.load.spritesheet("blue_generic", "assets/map/assets/blue_generic.png", {\n      frameWidth: 8,\n      frameHeight: 8\n    });\n  },\n\n  create: context => {\n    context.map = context.make.tilemap({ key: "map" });\n    context.mainTileSet = context.map.addTilesetImage("blue_generic");\n    context.BackgroundTileSet = context.map.addTilesetImage("blue_generic");\n    context.image_backgroundTileSet = context.map.addTilesetImage("background");\n    context.image_backgroundLayer = context.map.createDynamicLayer("image_background", context.image_backgroundTileSet, 0, 0);\n    context.BackgroundLayer = context.map.createDynamicLayer("Background", context.BackgroundTileSet, 0, 0);\n    context.mainLayer = context.map.createDynamicLayer("MAIN", context.mainTileSet, 0, 0);\n\n    context.mainLayer.setCollisionByExclusion([-1]);\n\n    // bounds\n    context.physics.world.bounds.width = context.mainLayer.width;\n    context.physics.world.bounds.height = context.mainLayer.height;\n  }\n};\n// CONCATENATED MODULE: ./src/index.js\n// import "phaser";\n// import "./socketController";\n\n\n\n\n\n\n\nvar config = {\n  type: Phaser.AUTO,\n  parent: "phaser-example",\n  width: 400,\n  height: 300,\n  physics: {\n    default: "arcade",\n    arcade: {\n      gravity: { y: 300 },\n      debug: true\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\n\nvar game = new Phaser.Game(config);\nvar state = new State();\nvar _this;\nvar src_socket = io();\nvar socketController = new SocketController(src_socket);\n\n/**\r\n * THIS IS THE PRE-LOAD FUNCTION\r\n */\nfunction preload() {\n  tryHardmap.load(this);\n  knightAnimations.load(this);\n}\n\n/**\r\n * THIS IS THE CREATE FUNCTION\r\n */\nfunction create() {\n\n  tryHardmap.create(this);\n  knightAnimations.create(this);\n\n  state.initialize(this, src_socket);\n  this.physics.add.collider(state.myPlayer, this.mainLayer);\n  this.physics.add.collider(state.otherPlayers, this.mainLayer);\n  getInitialPlayers();\n  this.cameras.main.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);;\n  this.cameras.main.startFollow(state.myPlayer);\n\n  this.input.on("pointerdown", pointer => {\n    if (pointer.buttons === 1) {\n      state.myPlayer.attacking = true;\n      src_socket.emit("attack", { id: state.myPlayer.id });\n    } else if (pointer.buttons === 2) {\n      state.myPlayer.blocking = true;\n      src_socket.emit("block", { id: state.myPlayer.id });\n    }\n  });\n\n  this.input.on("pointerup", function (pointer) {\n    state.myPlayer.attacking = false;\n    state.myPlayer.blocking = false;\n    src_socket.emit("block release", { id: state.myPlayer.id });\n    src_socket.emit("attack release", { id: state.myPlayer.id });\n  });\n\n  this.physics.add.overlap(state.myPlayer, state.otherPlayers, playerCollision);\n\n  socketController.initialize(state);\n}\n\n/**\r\n * THIS IS THE UPDATE FUNCTION\r\n */\n\nfunction update(time, delta) {\n  if (state.myPlayer.health < 0) return;\n\n  state.myPlayer.moving = false;\n\n  // keyboard listeners\n  if (state.keys.A.isDown) {\n    state.player.setVelocityX(-160);\n    state.myPlayer.flip(true, src_socket);\n    state.myPlayer.moving = true;\n  } else if (state.keys.D.isDown) {\n    state.player.setVelocityX(160);\n    state.myPlayer.flip(false, src_socket);\n    state.myPlayer.moving = true;\n  } else {\n    state.player.setVelocityX(0);\n  }\n  // Jump\n  if (state.keys.W.isDown && state.myPlayer.body.onFloor()) {\n    state.player.setVelocityY(-250);\n  }\n\n  state.myPlayer.update(src_socket);\n}\n\n/**\r\n * UTIL functions\r\n */\n\nfunction getInitialPlayers() {\n  var request = new XMLHttpRequest();\n  request.open("GET", "/initialize", false);\n  request.send(null);\n\n  if (request.status === 200) {\n    state.initialOtherPlayers = JSON.parse(request.response);\n    for (var key in state.initialOtherPlayers) {\n      if (key !== state.myPlayer.id) {\n        var otherPlayer = state.otherPlayers.get();\n        if (otherPlayer) {\n          otherPlayer.anims.play("idle");\n          otherPlayer.setInitialPosition(state.initialOtherPlayers[key].x, state.initialOtherPlayers[key].y, key);\n        }\n      }\n    }\n  }\n}\n\nfunction playerCollision(player, otherPlayer) {\n  if (!player.injured) {\n    if (otherPlayer.attacking && !player.blocking) {\n      player.health -= 10;\n      if (otherPlayer.flipState) {\n        state.myPlayer.knockbackDistance = -50;\n        state.myPlayer.knockback.play();\n      } else {\n        state.myPlayer.knockbackDistance = 50;\n        state.myPlayer.knockback.play();\n      }\n      player.injured = true;\n      setTimeout(() => {\n        player.injured = false;\n      }, 1000);\n    } else if (otherPlayer.attacking && player.blocking) {}\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc29ja2V0Q29udHJvbGxlci5qcz9jYTA2Iiwid2VicGFjazovLy8uL3NyYy9Ud2VlbnMvdHdlZW5zLmpzPzE5ZjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVPYmplY3RzL1BsYXllci5qcz84NGM2Iiwid2VicGFjazovLy8uL3NyYy9BbmltYXRpb25zL2tuaWdodEFuaW1hdGlvbnMuanM/MzE3OCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUuanM/ZmFhZSIsIndlYnBhY2s6Ly8vLi9zcmMvTWFwcy90cnlIYXJkTWFwLmpzP2FjMmQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwibmFtZXMiOlsiU29ja2V0Q29udHJvbGxlciIsInNvY2tldCIsImluaXRpYWxpemUiLCJzdGF0ZSIsIm15UGxheWVyIiwiaWQiLCJvbiIsInBsYXllciIsImNvbnNvbGUiLCJsb2ciLCJvdGhlclBsYXllciIsIm90aGVyUGxheWVycyIsImdldCIsImFuaW1zIiwicGxheSIsInNldEluaXRpYWxQb3NpdGlvbiIsIngiLCJ5IiwiZGVsZXRlZFBsYXllcklEIiwidGhpc09uZSIsImdldENoaWxkcmVuIiwiZmluZCIsImVsZW1lbnQiLCJkZXN0cm95IiwiaW5pdGlhbERhdGEiLCJtb3ZpbmciLCJoZWFsdGgiLCJzZXRBbmltYXRpb24iLCJzZXRQb3NpdGlvbiIsImF0dGFja2luZyIsImJsb2NraW5nIiwiZmxpcFN0YXRlIiwidG9nZ2xlRmxpcFgiLCJ0d2VlbnNMaWJyYXJ5Iiwic2V0S25vY2tCYWNrVHdlZW4iLCJ0YXJnZXQiLCJrbm9ja2JhY2siLCJ0d2VlbnMiLCJhZGQiLCJ0YXJnZXRzIiwidmFsdWUiLCJrbm9ja2JhY2tEaXN0YW5jZSIsImVhc2UiLCJkdXJhdGlvbiIsInBhdXNlZCIsIm9uQ29tcGxldGUiLCJQbGF5ZXIiLCJQaGFzZXIiLCJDbGFzcyIsIkV4dGVuZHMiLCJHYW1lT2JqZWN0cyIsIlNwcml0ZSIsInNjZW5lIiwiY2FsbCIsInNldEFjdGl2ZSIsInNldFZpc2libGUiLCJrZXkiLCJrbm9ja0JhY2tEaXN0YW5jZSIsImluanVyZWQiLCJiaW5kIiwic2V0TmV3UG9zaXRpb24iLCJ0YWtlRGFtYWdlIiwiZGFtYWdlIiwiZmxpcCIsIm5ld0ZsaXBTdGF0ZSIsImVtaXQiLCJ1cGRhdGVBbmltYXRpb25zIiwidXBkYXRlU2VydmVyV2l0aFBvc2l0aW9uIiwidXBkYXRlIiwiS25pZ2h0QW5pbWF0aW9ucyIsImxvYWQiLCJjb250ZXh0Iiwic3ByaXRlc2hlZXQiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJlbmRGcmFtZSIsImNyZWF0ZSIsImZyYW1lcyIsImdlbmVyYXRlRnJhbWVOdW1iZXJzIiwic3RhcnQiLCJlbmQiLCJmcmFtZVJhdGUiLCJyZXBlYXQiLCJTdGF0ZSIsImF0dGFja1RpbWVyIiwiaW5pdGlhbE90aGVyUGxheWVycyIsImF0dGFjayIsImJsb2NrIiwiZGlzYWJsZUlucHV0Iiwia2V5cyIsInVwZGF0ZVBvc2l0aW9uIiwiaW5pdGlhbGl6ZVBsYXllciIsImluaXRpYWxpemVPdGhlclBsYXllcnMiLCJpbml0aWFsaXplS2V5cyIsIlciLCJpbnB1dCIsImtleWJvYXJkIiwiYWRkS2V5IiwiSW5wdXQiLCJLZXlib2FyZCIsIktleUNvZGVzIiwiQSIsIlMiLCJEIiwia25vY2tiYWNrdHdlZW4iLCJwaHlzaWNzIiwiZ3JvdXAiLCJjbGFzc1R5cGUiLCJtYXhTaXplIiwiY29sbGlkZVdvcmxkQm91bmRzIiwiYm91bmNlWCIsInRyeUhhcmRtYXAiLCJ0aWxlbWFwVGlsZWRKU09OIiwibWFwIiwibWFrZSIsInRpbGVtYXAiLCJtYWluVGlsZVNldCIsImFkZFRpbGVzZXRJbWFnZSIsIkJhY2tncm91bmRUaWxlU2V0IiwiaW1hZ2VfYmFja2dyb3VuZFRpbGVTZXQiLCJpbWFnZV9iYWNrZ3JvdW5kTGF5ZXIiLCJjcmVhdGVEeW5hbWljTGF5ZXIiLCJCYWNrZ3JvdW5kTGF5ZXIiLCJtYWluTGF5ZXIiLCJzZXRDb2xsaXNpb25CeUV4Y2x1c2lvbiIsIndvcmxkIiwiYm91bmRzIiwid2lkdGgiLCJoZWlnaHQiLCJjb25maWciLCJ0eXBlIiwiQVVUTyIsInBhcmVudCIsImRlZmF1bHQiLCJhcmNhZGUiLCJncmF2aXR5IiwiZGVidWciLCJwcmVsb2FkIiwiZ2FtZSIsIkdhbWUiLCJfdGhpcyIsImlvIiwic29ja2V0Q29udHJvbGxlciIsImNvbGxpZGVyIiwiZ2V0SW5pdGlhbFBsYXllcnMiLCJjYW1lcmFzIiwibWFpbiIsInNldEJvdW5kcyIsIndpZHRoSW5QaXhlbHMiLCJoZWlnaHRJblBpeGVscyIsInN0YXJ0Rm9sbG93IiwicG9pbnRlciIsImJ1dHRvbnMiLCJvdmVybGFwIiwicGxheWVyQ29sbGlzaW9uIiwidGltZSIsImRlbHRhIiwiaXNEb3duIiwic2V0VmVsb2NpdHlYIiwiYm9keSIsIm9uRmxvb3IiLCJzZXRWZWxvY2l0eVkiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInN0YXR1cyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sTUFBTUEsbUJBQW1CLFVBQVNDLE1BQVQsRUFBaUI7QUFDL0MsT0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsT0FBS0MsVUFBTCxHQUFtQkMsS0FBRCxJQUFXO0FBQzNCQSxVQUFNQyxRQUFOLENBQWVDLEVBQWYsR0FBb0JKLE9BQU9JLEVBQTNCO0FBQ0EsU0FBS0osTUFBTCxDQUFZSyxFQUFaLENBQWUsZUFBZixFQUFnQyxVQUFTQyxNQUFULEVBQWlCO0FBQy9DLFVBQUlBLE9BQU9GLEVBQVAsS0FBY0YsTUFBTUMsUUFBTixDQUFlQyxFQUFqQyxFQUFxQztBQUNuQ0csZ0JBQVFDLEdBQVIsQ0FBWSxpQkFBWixFQUErQkYsT0FBT0YsRUFBdEM7QUFDQSxZQUFJSyxjQUFjUCxNQUFNUSxZQUFOLENBQW1CQyxHQUFuQixFQUFsQjtBQUNBLFlBQUlGLFdBQUosRUFBaUI7QUFDZkEsc0JBQVlHLEtBQVosQ0FBa0JDLElBQWxCLENBQXVCLE1BQXZCO0FBQ0FKLHNCQUFZSyxrQkFBWixDQUErQlIsT0FBT1MsQ0FBdEMsRUFBeUNULE9BQU9VLENBQWhELEVBQW1EVixPQUFPRixFQUExRDtBQUNEO0FBQ0Y7QUFDRixLQVREOztBQVdBLFNBQUtKLE1BQUwsQ0FBWUssRUFBWixDQUFlLGVBQWYsRUFBZ0MsVUFBU1ksZUFBVCxFQUEwQjtBQUN4RCxVQUFJQSxvQkFBb0JmLE1BQU1FLEVBQTlCLEVBQWtDO0FBQ2hDLFlBQUljLFVBQVVoQixNQUFNUSxZQUFOLENBQW1CUyxXQUFuQixHQUFpQ0MsSUFBakMsQ0FBc0MsVUFBU0MsT0FBVCxFQUFrQjtBQUNwRSxpQkFBT0EsUUFBUWpCLEVBQVIsS0FBZWEsZUFBdEI7QUFDRCxTQUZhLENBQWQ7QUFHQUMsZ0JBQVFJLE9BQVI7QUFDRDtBQUNGLEtBUEQ7O0FBU0EsU0FBS3RCLE1BQUwsQ0FBWUssRUFBWixDQUFlLFNBQWYsRUFBMEIsVUFBU2tCLFdBQVQsRUFBc0I7QUFDOUNoQixjQUFRQyxHQUFSLENBQVksV0FBWjtBQUNBTixZQUFNRSxFQUFOLEdBQVdKLE9BQU9JLEVBQWxCO0FBQ0QsS0FIRDs7QUFLQSxTQUFLSixNQUFMLENBQVlLLEVBQVosQ0FBZSxRQUFmLEVBQXlCLFVBQVNDLE1BQVQsRUFBaUI7QUFDeEMsVUFBSWtCLFNBQVMsS0FBYjtBQUNBLFVBQUlsQixPQUFPRixFQUFQLEtBQWNGLE1BQU1DLFFBQU4sQ0FBZUMsRUFBakMsRUFBcUM7QUFDbkMsWUFBSWMsVUFBVWhCLE1BQU1RLFlBQU4sQ0FBbUJTLFdBQW5CLEdBQWlDQyxJQUFqQyxDQUFzQyxVQUFTQyxPQUFULEVBQWtCO0FBQ3BFLGlCQUFPQSxRQUFRakIsRUFBUixLQUFlRSxPQUFPRixFQUE3QjtBQUNELFNBRmEsQ0FBZDtBQUdBLFlBQUksT0FBT2MsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxjQUFHQSxRQUFRTyxNQUFSLEdBQWUsQ0FBbEIsRUFBb0I7QUFDbEJQLG9CQUFRUSxZQUFSLENBQXFCLE9BQXJCO0FBQ0E7QUFDRDtBQUNELGNBQUlSLFFBQVFILENBQVIsS0FBY1QsT0FBT1MsQ0FBckIsSUFBMEJHLFFBQVFGLENBQVIsS0FBY1YsT0FBT1UsQ0FBbkQsRUFBc0Q7QUFDcERFLG9CQUFRUyxXQUFSLENBQW9CckIsT0FBT1MsQ0FBM0IsRUFBOEJULE9BQU9VLENBQXJDO0FBQ0FRLHFCQUFTLElBQVQ7QUFDRDtBQUNELGNBQUlsQixPQUFPc0IsU0FBWCxFQUFzQjtBQUNwQlYsb0JBQVFRLFlBQVIsQ0FBcUIsT0FBckI7QUFDQVIsb0JBQVFVLFNBQVIsR0FBb0IsSUFBcEI7QUFDRCxXQUhELE1BR08sSUFBSXRCLE9BQU91QixRQUFYLEVBQXFCO0FBQzFCWCxvQkFBUVEsWUFBUixDQUFxQixPQUFyQjtBQUNBUixvQkFBUVcsUUFBUixHQUFtQixJQUFuQjtBQUNELFdBSE0sTUFHQSxJQUFJTCxNQUFKLEVBQVk7QUFDakJOLG9CQUFRVSxTQUFSLEdBQW9CLEtBQXBCO0FBQ0FWLG9CQUFRVyxRQUFSLEdBQW1CLEtBQW5CO0FBQ0FYLG9CQUFRUSxZQUFSLENBQXFCLE1BQXJCO0FBQ0QsV0FKTSxNQUlBO0FBQ0xSLG9CQUFRVSxTQUFSLEdBQW9CLEtBQXBCO0FBQ0FWLG9CQUFRVyxRQUFSLEdBQW1CLEtBQW5CO0FBQ0FYLG9CQUFRUSxZQUFSLENBQXFCLE1BQXJCO0FBQ0Q7O0FBRUQsY0FBSVIsUUFBUVksU0FBUixLQUFzQnhCLE9BQU93QixTQUFqQyxFQUE0QztBQUMxQ1osb0JBQVFZLFNBQVIsR0FBb0J4QixPQUFPd0IsU0FBM0I7QUFDQVosb0JBQVFhLFdBQVI7QUFDRDtBQUNGO0FBQ0Y7QUFDRixLQXJDRDs7QUF1Q0EsU0FBSy9CLE1BQUwsQ0FBWUssRUFBWixDQUFlLFFBQWYsRUFBeUIsVUFBU0MsTUFBVCxFQUFpQixDQUFFLENBQTVDO0FBQ0QsR0FuRUQ7QUFvRUQsQ0F0RU07O0FBd0VQOztBQUVBLEs7O0FDMUVPLElBQUkwQixnQkFBZ0I7QUFDdkJDLHFCQUFtQixVQUFTQyxNQUFULEVBQWdCO0FBQy9CQSxXQUFPQyxTQUFQLEdBQW1CLEtBQUtDLE1BQUwsQ0FBWUMsR0FBWixDQUFnQjtBQUNqQ0MsZUFBU0osTUFEd0I7QUFFakNuQixTQUFHO0FBQ0R3QixlQUFPLE1BQU1MLE9BQU9uQixDQUFQLEdBQVdtQixPQUFPTSxpQkFEOUI7QUFFREMsY0FBTTtBQUZMLE9BRjhCO0FBTWpDQyxnQkFBVSxHQU51QjtBQU9qQ0MsY0FBUSxJQVB5QjtBQVFqQ0Msa0JBQVksTUFBSTtBQUNkckMsZ0JBQVFDLEdBQVIsQ0FBWSwyQkFBWjtBQUNBRCxnQkFBUUMsR0FBUixDQUFZMEIsTUFBWjtBQUNBQSxlQUFPRCxpQkFBUCxDQUF5QkMsTUFBekI7QUFDRDtBQVpnQyxLQUFoQixDQUFuQjtBQWNIO0FBaEJzQixDQUFwQixDOztBQ0FQO0FBQ0E7O0FBRU8sTUFBTVcsYUFBTUEsR0FBRyxJQUFJQyxPQUFPQyxLQUFYLENBQWlCO0FBQ3JDQyxXQUFTRixPQUFPRyxXQUFQLENBQW1CQyxNQURTOztBQUdyQ2pELGNBQVksU0FBUzRDLE1BQVQsQ0FBZ0JNLEtBQWhCLEVBQXVCO0FBQ2pDTCxXQUFPRyxXQUFQLENBQW1CQyxNQUFuQixDQUEwQkUsSUFBMUIsQ0FBK0IsSUFBL0IsRUFBcUNELEtBQXJDLEVBQTRDLENBQTVDLEVBQStDLENBQS9DLEVBQWtELFNBQWxEO0FBQ0EsU0FBS0UsU0FBTCxDQUFlLElBQWY7QUFDQSxTQUFLQyxVQUFMLENBQWdCLElBQWhCO0FBQ0EsU0FBS0MsR0FBTCxHQUFXLE1BQVg7QUFDQSxTQUFLOUIsTUFBTCxHQUFjLEdBQWQ7QUFDQSxTQUFLK0IsaUJBQUwsR0FBeUIsRUFBekI7QUFDQSxTQUFLMUIsU0FBTCxHQUFpQixLQUFqQjtBQUNBLFNBQUtGLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsU0FBS0wsTUFBTCxHQUFjLEtBQWQ7QUFDQSxTQUFLaUMsT0FBTCxHQUFlLEtBQWY7QUFDQSxTQUFLeEIsaUJBQUwsR0FBeUJELGFBQWFBLENBQUNDLGlCQUFkLENBQWdDeUIsSUFBaEMsQ0FBcUNQLEtBQXJDLENBQXpCO0FBQ0EsU0FBS2hCLFNBQUwsR0FBaUIsS0FBS0YsaUJBQUwsQ0FBdUIsSUFBdkIsQ0FBakI7QUFDRCxHQWpCb0M7O0FBbUJyQ25CLHNCQUFvQixVQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZVosRUFBZixFQUFtQjtBQUNyQyxTQUFLdUIsV0FBTCxDQUFpQlosQ0FBakIsRUFBb0JDLENBQXBCO0FBQ0EsU0FBS1osRUFBTCxHQUFVQSxFQUFWO0FBQ0QsR0F0Qm9DOztBQXdCckN1RCxrQkFBZ0IsVUFBUzVDLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQzdCLFNBQUtaLEVBQUwsR0FBVUEsRUFBVjtBQUNBLFNBQUt1QixXQUFMLENBQWlCWixDQUFqQixFQUFvQkMsQ0FBcEI7QUFDRCxHQTNCb0M7O0FBNkJyQ1UsZ0JBQWMsVUFBUzZCLEdBQVQsRUFBYztBQUMxQixRQUFJLEtBQUtBLEdBQUwsS0FBYUEsR0FBakIsRUFBc0I7QUFDcEIsV0FBSzFDLElBQUwsQ0FBVTBDLEdBQVY7QUFDQSxXQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDRDtBQUNGLEdBbENvQzs7QUFvQ3JDSyxjQUFZLFVBQVNDLE1BQVQsRUFBaUI7QUFDM0IsU0FBS3BDLE1BQUwsSUFBZW9DLE1BQWY7QUFDRCxHQXRDb0M7O0FBd0NyQ0MsUUFBTSxVQUFTQyxZQUFULEVBQXVCL0QsTUFBdkIsRUFBK0I7QUFDbkMsUUFBSStELGlCQUFpQixLQUFLakMsU0FBMUIsRUFBcUM7QUFDbkMsV0FBS0EsU0FBTCxHQUFpQmlDLFlBQWpCO0FBQ0EsV0FBS2hDLFdBQUw7QUFDQS9CLGFBQU9nRSxJQUFQLENBQVksTUFBWixFQUFvQixFQUFFNUQsSUFBSSxLQUFLQSxFQUFYLEVBQWUwQixXQUFXLEtBQUtBLFNBQS9CLEVBQXBCO0FBQ0Q7QUFDRixHQTlDb0M7O0FBa0RyQ21DLG9CQUFrQixZQUFXO0FBQzNCLFFBQUksS0FBS3JDLFNBQVQsRUFBb0I7QUFDbEIsV0FBS0YsWUFBTCxDQUFrQixPQUFsQjtBQUNELEtBRkQsTUFFTyxJQUFJLEtBQUtHLFFBQVQsRUFBbUI7QUFDeEIsV0FBS0gsWUFBTCxDQUFrQixPQUFsQjtBQUNBO0FBQ0QsS0FITSxNQUdBLElBQUksS0FBS0YsTUFBVCxFQUFpQjtBQUN0QixXQUFLRSxZQUFMLENBQWtCLE1BQWxCO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsV0FBS0EsWUFBTCxDQUFrQixNQUFsQjtBQUNEO0FBQ0YsR0E3RG9DOztBQStEckN3QywyQkFBeUJsRSxNQUF6QixFQUFnQztBQUM5QkEsV0FBT2dFLElBQVAsQ0FBWSxhQUFaLEVBQTJCO0FBQ3pCakQsU0FBRyxLQUFLQSxDQURpQjtBQUV6QkMsU0FBRyxLQUFLQSxDQUZpQjtBQUd6QlosVUFBSSxLQUFLQTtBQUhnQixLQUEzQjtBQUtELEdBckVvQzs7QUF1RXJDK0QsVUFBUSxVQUFTbkUsTUFBVCxFQUFpQjtBQUN2QixTQUFLaUUsZ0JBQUw7QUFDQSxTQUFLQyx3QkFBTCxDQUE4QmxFLE1BQTlCO0FBQ0Q7QUExRW9DLENBQWpCLENBQWYsQzs7QUNIUCxJQUFJb0UsbUJBQW1CLEVBQXZCOztBQUVlQSx3RUFBbUI7QUFDOUJDLE9BQUtDLE9BQUwsRUFBYTtBQUNUQSxZQUFRRCxJQUFSLENBQWFFLFdBQWIsQ0FBeUIsUUFBekIsRUFBbUMsd0JBQW5DLEVBQTZEO0FBQ3pEQyxrQkFBWSxFQUQ2QztBQUV6REMsbUJBQWEsRUFGNEM7QUFHekRDLGdCQUFVO0FBSCtDLEtBQTdEO0FBS0VKLFlBQVFELElBQVIsQ0FBYUUsV0FBYixDQUF5QixTQUF6QixFQUFvQyx3QkFBcEMsRUFBOEQ7QUFDNURDLGtCQUFZLEVBRGdEO0FBRTVEQyxtQkFBYSxFQUYrQztBQUc1REMsZ0JBQVU7QUFIa0QsS0FBOUQ7QUFLQUosWUFBUUQsSUFBUixDQUFhRSxXQUFiLENBQXlCLFVBQXpCLEVBQXFDLHlCQUFyQyxFQUFnRTtBQUM5REMsa0JBQVksRUFEa0Q7QUFFOURDLG1CQUFhLEVBRmlEO0FBRzlEQyxnQkFBVTtBQUhvRCxLQUFoRTtBQUtBSixZQUFRRCxJQUFSLENBQWFFLFdBQWIsQ0FBeUIsVUFBekIsRUFBcUMseUJBQXJDLEVBQWdFO0FBQzlEQyxrQkFBWSxFQURrRDtBQUU5REMsbUJBQWEsRUFGaUQ7QUFHOURDLGdCQUFVO0FBSG9ELEtBQWhFO0FBS0FKLFlBQVFELElBQVIsQ0FBYUUsV0FBYixDQUF5QixRQUF6QixFQUFtQyx5QkFBbkMsRUFBOEQ7QUFDNURDLGtCQUFZLEVBRGdEO0FBRTVEQyxtQkFBYSxFQUYrQztBQUc1REMsZ0JBQVU7QUFIa0QsS0FBOUQ7QUFLTCxHQTNCNkI7O0FBNkI5QkMsU0FBT0wsT0FBUCxFQUFlO0FBQ1hBLFlBQVExRCxLQUFSLENBQWMrRCxNQUFkLENBQXFCO0FBQ2pCcEIsV0FBSyxNQURZO0FBRWpCcUIsY0FBUU4sUUFBUTFELEtBQVIsQ0FBY2lFLG9CQUFkLENBQW1DLFFBQW5DLEVBQTZDLEVBQUVDLE9BQU8sQ0FBVCxFQUFZQyxLQUFLLENBQWpCLEVBQTdDLENBRlM7QUFHakJDLGlCQUFXLENBSE07QUFJakJDLGNBQVEsQ0FBQztBQUpRLEtBQXJCOztBQU9FWCxZQUFRMUQsS0FBUixDQUFjK0QsTUFBZCxDQUFxQjtBQUNuQnBCLFdBQUssTUFEYztBQUVuQnFCLGNBQVFOLFFBQVExRCxLQUFSLENBQWNpRSxvQkFBZCxDQUFtQyxTQUFuQyxFQUE4QyxFQUFFQyxPQUFPLENBQVQsRUFBWUMsS0FBSyxDQUFqQixFQUE5QyxDQUZXO0FBR25CQyxpQkFBVyxFQUhRO0FBSW5CQyxjQUFRLENBQUM7QUFKVSxLQUFyQjs7QUFPQVgsWUFBUTFELEtBQVIsQ0FBYytELE1BQWQsQ0FBcUI7QUFDbkJwQixXQUFLLE9BRGM7QUFFbkJxQixjQUFRTixRQUFRMUQsS0FBUixDQUFjaUUsb0JBQWQsQ0FBbUMsVUFBbkMsRUFBK0MsRUFBRUMsT0FBTyxDQUFULEVBQVlDLEtBQUssQ0FBakIsRUFBL0MsQ0FGVztBQUduQkMsaUJBQVcsRUFIUTtBQUluQkMsY0FBUSxDQUFDO0FBSlUsS0FBckI7O0FBT0FYLFlBQVExRCxLQUFSLENBQWMrRCxNQUFkLENBQXFCO0FBQ25CcEIsV0FBSyxPQURjO0FBRW5CcUIsY0FBUU4sUUFBUTFELEtBQVIsQ0FBY2lFLG9CQUFkLENBQW1DLFVBQW5DLEVBQStDLEVBQUVDLE9BQU8sQ0FBVCxFQUFZQyxLQUFLLENBQWpCLEVBQS9DLENBRlc7QUFHbkJDLGlCQUFXO0FBSFEsS0FBckI7O0FBTUFWLFlBQVExRCxLQUFSLENBQWMrRCxNQUFkLENBQXFCO0FBQ25CcEIsV0FBSyxPQURjO0FBRW5CcUIsY0FBUU4sUUFBUTFELEtBQVIsQ0FBY2lFLG9CQUFkLENBQW1DLFFBQW5DLEVBQTZDLEVBQUNDLE9BQU8sQ0FBUixFQUFXQyxLQUFLLENBQWhCLEVBQTdDLENBRlc7QUFHbkJDLGlCQUFXO0FBSFEsS0FBckI7QUFLTDtBQTlENkIsQ0FBbEMsRTs7QUNGQTtBQUNBO0FBQ0E7O0FBSU8sTUFBTUUsUUFBUSxZQUFXO0FBQzlCLE9BQUs5RSxFQUFMLEdBQVUsRUFBVjtBQUNBLE9BQUtXLENBQUwsR0FBUyxHQUFUO0FBQ0EsT0FBS0MsQ0FBTCxHQUFTLEdBQVQ7QUFDQSxPQUFLbUUsV0FBTCxHQUFtQixJQUFuQjtBQUNBLE9BQUtDLG1CQUFMLEdBQTJCLEVBQTNCO0FBQ0EsT0FBSzFFLFlBQUwsR0FBb0IsRUFBcEI7QUFDQSxPQUFLSixNQUFMLEdBQWMsRUFBZDtBQUNBLE9BQUtILFFBQUwsR0FBZ0IsRUFBaEI7QUFDQSxPQUFLcUIsTUFBTCxHQUFjLEtBQWQ7QUFDQSxPQUFLQyxNQUFMLEdBQWMsR0FBZDtBQUNBLE9BQUs0RCxNQUFMLEdBQWMsS0FBZDtBQUNBLE9BQUtDLEtBQUwsR0FBYSxLQUFiO0FBQ0EsT0FBS0MsWUFBTCxHQUFvQixLQUFwQjtBQUNBLE9BQUtwRCxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsT0FBS3FELElBQUwsR0FBWSxFQUFaOztBQUdBLE9BQUtDLGNBQUwsR0FBc0IsQ0FBQzFFLENBQUQsRUFBSUMsQ0FBSixLQUFVO0FBQzlCLFNBQUtELENBQUwsR0FBU0EsQ0FBVDtBQUNBLFNBQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNELEdBSEQ7O0FBS0EsT0FBS2YsVUFBTCxHQUFrQixDQUFDcUUsT0FBRCxFQUFVdEUsTUFBVixLQUFxQjtBQUNyQyxTQUFLMEYsZ0JBQUwsQ0FBc0JwQixPQUF0QixFQUErQnRFLE1BQS9CO0FBQ0EsU0FBSzJGLHNCQUFMLENBQTRCckIsT0FBNUIsRUFBcUN0RSxNQUFyQztBQUNBLFNBQUs0RixjQUFMLENBQW9CdEIsT0FBcEI7QUFDRCxHQUpEOztBQU1BLE9BQUtzQixjQUFMLEdBQXVCdEIsT0FBRCxJQUFhO0FBQ2pDLFNBQUtrQixJQUFMLENBQVVLLENBQVYsR0FBY3ZCLFFBQVF3QixLQUFSLENBQWNDLFFBQWQsQ0FBdUJDLE1BQXZCLENBQThCbEQsT0FBT21ELEtBQVAsQ0FBYUMsUUFBYixDQUFzQkMsUUFBdEIsQ0FBK0JOLENBQTdELENBQWQ7QUFDQSxTQUFLTCxJQUFMLENBQVVZLENBQVYsR0FBYzlCLFFBQVF3QixLQUFSLENBQWNDLFFBQWQsQ0FBdUJDLE1BQXZCLENBQThCbEQsT0FBT21ELEtBQVAsQ0FBYUMsUUFBYixDQUFzQkMsUUFBdEIsQ0FBK0JDLENBQTdELENBQWQ7QUFDQSxTQUFLWixJQUFMLENBQVVhLENBQVYsR0FBYy9CLFFBQVF3QixLQUFSLENBQWNDLFFBQWQsQ0FBdUJDLE1BQXZCLENBQThCbEQsT0FBT21ELEtBQVAsQ0FBYUMsUUFBYixDQUFzQkMsUUFBdEIsQ0FBK0JFLENBQTdELENBQWQ7QUFDQSxTQUFLYixJQUFMLENBQVVjLENBQVYsR0FBY2hDLFFBQVF3QixLQUFSLENBQWNDLFFBQWQsQ0FBdUJDLE1BQXZCLENBQThCbEQsT0FBT21ELEtBQVAsQ0FBYUMsUUFBYixDQUFzQkMsUUFBdEIsQ0FBK0JHLENBQTdELENBQWQ7QUFDRCxHQUxEOztBQU9BLE9BQUtaLGdCQUFMLEdBQXdCLENBQUNwQixPQUFELEVBQVV0RSxNQUFWLEtBQXFCO0FBQzNDLFFBQUl1RyxpQkFBaUJ2RSxhQUFhQSxDQUFDQyxpQkFBZCxDQUFnQ3lCLElBQWhDLENBQXFDWSxPQUFyQyxDQUFyQjtBQUNBLFNBQUtoRSxNQUFMLEdBQWNnRSxRQUFRa0MsT0FBUixDQUFnQm5FLEdBQWhCLENBQW9Cb0UsS0FBcEIsQ0FBMEI7QUFDdENDLGlCQUFXN0QsYUFEMkI7QUFFdEM4RCxlQUFTLENBRjZCO0FBR3RDQywwQkFBb0I7QUFIa0IsS0FBMUIsQ0FBZDs7QUFNQSxTQUFLekcsUUFBTCxHQUFjLEtBQUtHLE1BQUwsQ0FBWUssR0FBWixFQUFkO0FBQ0EsU0FBS1IsUUFBTCxDQUFjVSxJQUFkLENBQW1CLE1BQW5CO0FBQ0EsU0FBS1YsUUFBTCxDQUFjVyxrQkFBZCxDQUFpQyxLQUFLQyxDQUF0QyxFQUF5QyxLQUFLQyxDQUE5QyxFQUFpRGhCLE9BQU9JLEVBQXhEO0FBQ0FtRyxtQkFBZSxLQUFLcEcsUUFBcEI7QUFDQUgsV0FBT2dFLElBQVAsQ0FBWSxlQUFaLEVBQTZCO0FBQzNCakQsU0FBRyxLQUFLWixRQUFMLENBQWNZLENBRFU7QUFFM0JDLFNBQUcsS0FBS2IsUUFBTCxDQUFjYSxDQUZVO0FBRzNCUyxjQUFRLEtBQUt0QixRQUFMLENBQWNzQixNQUhLO0FBSTNCckIsVUFBSUosT0FBT0k7QUFKZ0IsS0FBN0I7QUFNRCxHQWxCRDs7QUFvQkEsT0FBS3VGLHNCQUFMLEdBQThCckIsV0FBVztBQUN2QyxTQUFLNUQsWUFBTCxHQUFvQjRELFFBQVFrQyxPQUFSLENBQWdCbkUsR0FBaEIsQ0FBb0JvRSxLQUFwQixDQUEwQjtBQUM1Q0MsaUJBQVc3RCxhQURpQztBQUU1QzhELGVBQVMsR0FGbUM7QUFHNUNFLGVBQVMsQ0FIbUM7QUFJNUNELDBCQUFvQjtBQUp3QixLQUExQixDQUFwQjtBQU1ELEdBUEQ7QUFRRCxDQWhFTSxDOztBQ05BLE1BQU1FLGFBQWE7QUFDdEJ6QyxRQUFPQyxPQUFELElBQWE7QUFDakJBLFlBQVFELElBQVIsQ0FBYTBDLGdCQUFiLENBQThCLEtBQTlCLEVBQXFDLHlCQUFyQztBQUNBekMsWUFBUUQsSUFBUixDQUFhRSxXQUFiLENBQXlCLFlBQXpCLEVBQXVDLGtDQUF2QyxFQUEyRTtBQUN6RUMsa0JBQVksQ0FENkQ7QUFFekVDLG1CQUFhO0FBRjRELEtBQTNFO0FBSUFILFlBQVFELElBQVIsQ0FBYUUsV0FBYixDQUF5QixjQUF6QixFQUF5QyxvQ0FBekMsRUFBK0U7QUFDN0VDLGtCQUFZLENBRGlFO0FBRTdFQyxtQkFBYTtBQUZnRSxLQUEvRTtBQUlELEdBWHFCOztBQWF0QkUsVUFBU0wsT0FBRCxJQUFhO0FBQ2pCQSxZQUFRMEMsR0FBUixHQUFjMUMsUUFBUTJDLElBQVIsQ0FBYUMsT0FBYixDQUFxQixFQUFFM0QsS0FBSyxLQUFQLEVBQXJCLENBQWQ7QUFDQWUsWUFBUTZDLFdBQVIsR0FBc0I3QyxRQUFRMEMsR0FBUixDQUFZSSxlQUFaLENBQTRCLGNBQTVCLENBQXRCO0FBQ0E5QyxZQUFRK0MsaUJBQVIsR0FBNEIvQyxRQUFRMEMsR0FBUixDQUFZSSxlQUFaLENBQTRCLGNBQTVCLENBQTVCO0FBQ0E5QyxZQUFRZ0QsdUJBQVIsR0FBa0NoRCxRQUFRMEMsR0FBUixDQUFZSSxlQUFaLENBQTRCLFlBQTVCLENBQWxDO0FBQ0E5QyxZQUFRaUQscUJBQVIsR0FBZ0NqRCxRQUFRMEMsR0FBUixDQUFZUSxrQkFBWixDQUM5QixrQkFEOEIsRUFFOUJsRCxRQUFRZ0QsdUJBRnNCLEVBRzlCLENBSDhCLEVBSTlCLENBSjhCLENBQWhDO0FBTUFoRCxZQUFRbUQsZUFBUixHQUEwQm5ELFFBQVEwQyxHQUFSLENBQVlRLGtCQUFaLENBQ3hCLFlBRHdCLEVBRXhCbEQsUUFBUStDLGlCQUZnQixFQUd4QixDQUh3QixFQUl4QixDQUp3QixDQUExQjtBQU1BL0MsWUFBUW9ELFNBQVIsR0FBb0JwRCxRQUFRMEMsR0FBUixDQUFZUSxrQkFBWixDQUErQixNQUEvQixFQUF1Q2xELFFBQVE2QyxXQUEvQyxFQUE0RCxDQUE1RCxFQUErRCxDQUEvRCxDQUFwQjs7QUFFQTdDLFlBQVFvRCxTQUFSLENBQWtCQyx1QkFBbEIsQ0FBMEMsQ0FBQyxDQUFDLENBQUYsQ0FBMUM7O0FBRUE7QUFDQXJELFlBQVFrQyxPQUFSLENBQWdCb0IsS0FBaEIsQ0FBc0JDLE1BQXRCLENBQTZCQyxLQUE3QixHQUFxQ3hELFFBQVFvRCxTQUFSLENBQWtCSSxLQUF2RDtBQUNBeEQsWUFBUWtDLE9BQVIsQ0FBZ0JvQixLQUFoQixDQUFzQkMsTUFBdEIsQ0FBNkJFLE1BQTdCLEdBQXNDekQsUUFBUW9ELFNBQVIsQ0FBa0JLLE1BQXhEO0FBQ0g7QUFyQ3FCLENBQW5CLEM7O0FDQVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxJQUFJQyxTQUFTO0FBQ1hDLFFBQU1uRixPQUFPb0YsSUFERjtBQUVYQyxVQUFRLGdCQUZHO0FBR1hMLFNBQU8sR0FISTtBQUlYQyxVQUFRLEdBSkc7QUFLWHZCLFdBQVM7QUFDUDRCLGFBQVMsUUFERjtBQUVQQyxZQUFRO0FBQ05DLGVBQVMsRUFBRXRILEdBQUcsR0FBTCxFQURIO0FBRU51SCxhQUFPO0FBRkQ7QUFGRCxHQUxFO0FBWVhwRixTQUFPO0FBQ0xxRixhQUFTQSxPQURKO0FBRUw3RCxZQUFRQSxNQUZIO0FBR0xSLFlBQVFBO0FBSEg7QUFaSSxDQUFiOztBQW9CQSxJQUFJc0UsT0FBTyxJQUFJM0YsT0FBTzRGLElBQVgsQ0FBZ0JWLE1BQWhCLENBQVg7QUFDQSxJQUFJOUgsUUFBUSxJQUFJZ0YsS0FBSixFQUFaO0FBQ0EsSUFBSXlELEtBQUo7QUFDQSxJQUFJM0ksVUFBTUEsR0FBRzRJLElBQWI7QUFDQSxJQUFJQyxtQkFBbUIsSUFBSTlJLGdCQUFKLENBQXFCQyxVQUFyQixDQUF2Qjs7QUFHQTs7O0FBR0EsU0FBU3dJLE9BQVQsR0FBbUI7QUFDakIxQixZQUFVQSxDQUFDekMsSUFBWCxDQUFnQixJQUFoQjtBQUNBRCxrQkFBZ0JBLENBQUNDLElBQWpCLENBQXNCLElBQXRCO0FBQ0Q7O0FBRUQ7OztBQUdBLFNBQVNNLE1BQVQsR0FBa0I7O0FBRWhCbUMsWUFBVUEsQ0FBQ25DLE1BQVgsQ0FBa0IsSUFBbEI7QUFDQVAsa0JBQWdCQSxDQUFDTyxNQUFqQixDQUF3QixJQUF4Qjs7QUFFQXpFLFFBQU1ELFVBQU4sQ0FBaUIsSUFBakIsRUFBdUJELFVBQXZCO0FBQ0EsT0FBS3dHLE9BQUwsQ0FBYW5FLEdBQWIsQ0FBaUJ5RyxRQUFqQixDQUEwQjVJLE1BQU1DLFFBQWhDLEVBQTBDLEtBQUt1SCxTQUEvQztBQUNBLE9BQUtsQixPQUFMLENBQWFuRSxHQUFiLENBQWlCeUcsUUFBakIsQ0FBMEI1SSxNQUFNUSxZQUFoQyxFQUE4QyxLQUFLZ0gsU0FBbkQ7QUFDQXFCO0FBQ0EsT0FBS0MsT0FBTCxDQUFhQyxJQUFiLENBQWtCQyxTQUFsQixDQUNFLENBREYsRUFFRSxDQUZGLEVBR0UsS0FBS2xDLEdBQUwsQ0FBU21DLGFBSFgsRUFJRSxLQUFLbkMsR0FBTCxDQUFTb0MsY0FKWCxFQUtFO0FBQ0YsT0FBS0osT0FBTCxDQUFhQyxJQUFiLENBQWtCSSxXQUFsQixDQUE4Qm5KLE1BQU1DLFFBQXBDOztBQUVBLE9BQUsyRixLQUFMLENBQVd6RixFQUFYLENBQWMsYUFBZCxFQUE2QmlKLFdBQVc7QUFDdEMsUUFBSUEsUUFBUUMsT0FBUixLQUFvQixDQUF4QixFQUEyQjtBQUN6QnJKLFlBQU1DLFFBQU4sQ0FBZXlCLFNBQWYsR0FBMkIsSUFBM0I7QUFDQTVCLGdCQUFNQSxDQUFDZ0UsSUFBUCxDQUFZLFFBQVosRUFBc0IsRUFBRTVELElBQUlGLE1BQU1DLFFBQU4sQ0FBZUMsRUFBckIsRUFBdEI7QUFDRCxLQUhELE1BR08sSUFBSWtKLFFBQVFDLE9BQVIsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDaENySixZQUFNQyxRQUFOLENBQWUwQixRQUFmLEdBQTBCLElBQTFCO0FBQ0E3QixnQkFBTUEsQ0FBQ2dFLElBQVAsQ0FBWSxPQUFaLEVBQXFCLEVBQUU1RCxJQUFJRixNQUFNQyxRQUFOLENBQWVDLEVBQXJCLEVBQXJCO0FBQ0Q7QUFDRixHQVJEOztBQVVBLE9BQUswRixLQUFMLENBQVd6RixFQUFYLENBQWMsV0FBZCxFQUEyQixVQUFTaUosT0FBVCxFQUFrQjtBQUMzQ3BKLFVBQU1DLFFBQU4sQ0FBZXlCLFNBQWYsR0FBMkIsS0FBM0I7QUFDQTFCLFVBQU1DLFFBQU4sQ0FBZTBCLFFBQWYsR0FBMEIsS0FBMUI7QUFDQTdCLGNBQU1BLENBQUNnRSxJQUFQLENBQVksZUFBWixFQUE2QixFQUFFNUQsSUFBSUYsTUFBTUMsUUFBTixDQUFlQyxFQUFyQixFQUE3QjtBQUNBSixjQUFNQSxDQUFDZ0UsSUFBUCxDQUFZLGdCQUFaLEVBQThCLEVBQUU1RCxJQUFJRixNQUFNQyxRQUFOLENBQWVDLEVBQXJCLEVBQTlCO0FBQ0QsR0FMRDs7QUFPQSxPQUFLb0csT0FBTCxDQUFhbkUsR0FBYixDQUFpQm1ILE9BQWpCLENBQXlCdEosTUFBTUMsUUFBL0IsRUFBeUNELE1BQU1RLFlBQS9DLEVBQTZEK0ksZUFBN0Q7O0FBR0FaLG1CQUFpQjVJLFVBQWpCLENBQTRCQyxLQUE1QjtBQUNEOztBQUVEOzs7O0FBSUEsU0FBU2lFLE1BQVQsQ0FBZ0J1RixJQUFoQixFQUFzQkMsS0FBdEIsRUFBNkI7QUFDM0IsTUFBR3pKLE1BQU1DLFFBQU4sQ0FBZXNCLE1BQWYsR0FBc0IsQ0FBekIsRUFBNEI7O0FBRTVCdkIsUUFBTUMsUUFBTixDQUFlcUIsTUFBZixHQUF3QixLQUF4Qjs7QUFFQTtBQUNBLE1BQUl0QixNQUFNc0YsSUFBTixDQUFXWSxDQUFYLENBQWF3RCxNQUFqQixFQUF5QjtBQUN2QjFKLFVBQU1JLE1BQU4sQ0FBYXVKLFlBQWIsQ0FBMEIsQ0FBQyxHQUEzQjtBQUNBM0osVUFBTUMsUUFBTixDQUFlMkQsSUFBZixDQUFvQixJQUFwQixFQUEwQjlELFVBQTFCO0FBQ0FFLFVBQU1DLFFBQU4sQ0FBZXFCLE1BQWYsR0FBd0IsSUFBeEI7QUFDRCxHQUpELE1BSU8sSUFBSXRCLE1BQU1zRixJQUFOLENBQVdjLENBQVgsQ0FBYXNELE1BQWpCLEVBQXlCO0FBQzlCMUosVUFBTUksTUFBTixDQUFhdUosWUFBYixDQUEwQixHQUExQjtBQUNBM0osVUFBTUMsUUFBTixDQUFlMkQsSUFBZixDQUFvQixLQUFwQixFQUEyQjlELFVBQTNCO0FBQ0FFLFVBQU1DLFFBQU4sQ0FBZXFCLE1BQWYsR0FBd0IsSUFBeEI7QUFDRCxHQUpNLE1BSUE7QUFDTHRCLFVBQU1JLE1BQU4sQ0FBYXVKLFlBQWIsQ0FBMEIsQ0FBMUI7QUFDRDtBQUNEO0FBQ0EsTUFBSTNKLE1BQU1zRixJQUFOLENBQVdLLENBQVgsQ0FBYStELE1BQWIsSUFBdUIxSixNQUFNQyxRQUFOLENBQWUySixJQUFmLENBQW9CQyxPQUFwQixFQUEzQixFQUEwRDtBQUN4RDdKLFVBQU1JLE1BQU4sQ0FBYTBKLFlBQWIsQ0FBMEIsQ0FBQyxHQUEzQjtBQUNEOztBQUVEOUosUUFBTUMsUUFBTixDQUFlZ0UsTUFBZixDQUFzQm5FLFVBQXRCO0FBQ0Q7O0FBSUQ7Ozs7QUFJQSxTQUFTK0ksaUJBQVQsR0FBNkI7QUFDM0IsTUFBSWtCLFVBQVUsSUFBSUMsY0FBSixFQUFkO0FBQ0FELFVBQVFFLElBQVIsQ0FBYSxLQUFiLEVBQW9CLGFBQXBCLEVBQW1DLEtBQW5DO0FBQ0FGLFVBQVFHLElBQVIsQ0FBYSxJQUFiOztBQUVBLE1BQUlILFFBQVFJLE1BQVIsS0FBbUIsR0FBdkIsRUFBNEI7QUFDMUJuSyxVQUFNa0YsbUJBQU4sR0FBNEJrRixLQUFLQyxLQUFMLENBQVdOLFFBQVFPLFFBQW5CLENBQTVCO0FBQ0EsU0FBSyxJQUFJakgsR0FBVCxJQUFnQnJELE1BQU1rRixtQkFBdEIsRUFBMkM7QUFDekMsVUFBSTdCLFFBQVFyRCxNQUFNQyxRQUFOLENBQWVDLEVBQTNCLEVBQStCO0FBQzdCLFlBQUlLLGNBQWNQLE1BQU1RLFlBQU4sQ0FBbUJDLEdBQW5CLEVBQWxCO0FBQ0EsWUFBSUYsV0FBSixFQUFpQjtBQUNmQSxzQkFBWUcsS0FBWixDQUFrQkMsSUFBbEIsQ0FBdUIsTUFBdkI7QUFDQUosc0JBQVlLLGtCQUFaLENBQ0VaLE1BQU1rRixtQkFBTixDQUEwQjdCLEdBQTFCLEVBQStCeEMsQ0FEakMsRUFFRWIsTUFBTWtGLG1CQUFOLENBQTBCN0IsR0FBMUIsRUFBK0J2QyxDQUZqQyxFQUdFdUMsR0FIRjtBQUtEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsU0FBU2tHLGVBQVQsQ0FBeUJuSixNQUF6QixFQUFpQ0csV0FBakMsRUFBOEM7QUFDNUMsTUFBSSxDQUFDSCxPQUFPbUQsT0FBWixFQUFxQjtBQUNuQixRQUFJaEQsWUFBWW1CLFNBQVosSUFBeUIsQ0FBQ3RCLE9BQU91QixRQUFyQyxFQUErQztBQUM3Q3ZCLGFBQU9tQixNQUFQLElBQWlCLEVBQWpCO0FBQ0EsVUFBSWhCLFlBQVlxQixTQUFoQixFQUEyQjtBQUN6QjVCLGNBQU1DLFFBQU4sQ0FBZXFDLGlCQUFmLEdBQW1DLENBQUMsRUFBcEM7QUFDQXRDLGNBQU1DLFFBQU4sQ0FBZWdDLFNBQWYsQ0FBeUJ0QixJQUF6QjtBQUNELE9BSEQsTUFHTztBQUNMWCxjQUFNQyxRQUFOLENBQWVxQyxpQkFBZixHQUFtQyxFQUFuQztBQUNBdEMsY0FBTUMsUUFBTixDQUFlZ0MsU0FBZixDQUF5QnRCLElBQXpCO0FBQ0Q7QUFDRFAsYUFBT21ELE9BQVAsR0FBaUIsSUFBakI7QUFDQWdILGlCQUFXLE1BQU07QUFDZm5LLGVBQU9tRCxPQUFQLEdBQWlCLEtBQWpCO0FBQ0QsT0FGRCxFQUVHLElBRkg7QUFHRCxLQWJELE1BYU8sSUFBSWhELFlBQVltQixTQUFaLElBQXlCdEIsT0FBT3VCLFFBQXBDLEVBQThDLENBQ3BEO0FBQ0Y7QUFDRiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNvY2tldENvbnRyb2xsZXIgPSBmdW5jdGlvbihzb2NrZXQpIHtcclxuICB0aGlzLnNvY2tldCA9IHNvY2tldDtcclxuICB0aGlzLmluaXRpYWxpemUgPSAoc3RhdGUpID0+IHtcclxuICAgIHN0YXRlLm15UGxheWVyLmlkID0gc29ja2V0LmlkO1xyXG4gICAgdGhpcy5zb2NrZXQub24oXCJjcmVhdGUgcGxheWVyXCIsIGZ1bmN0aW9uKHBsYXllcikge1xyXG4gICAgICBpZiAocGxheWVyLmlkICE9PSBzdGF0ZS5teVBsYXllci5pZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGluZyBwbGF5ZXInLCBwbGF5ZXIuaWQpO1xyXG4gICAgICAgIHZhciBvdGhlclBsYXllciA9IHN0YXRlLm90aGVyUGxheWVycy5nZXQoKTtcclxuICAgICAgICBpZiAob3RoZXJQbGF5ZXIpIHtcclxuICAgICAgICAgIG90aGVyUGxheWVyLmFuaW1zLnBsYXkoXCJpZGxlXCIpO1xyXG4gICAgICAgICAgb3RoZXJQbGF5ZXIuc2V0SW5pdGlhbFBvc2l0aW9uKHBsYXllci54LCBwbGF5ZXIueSwgcGxheWVyLmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIFxyXG4gICAgdGhpcy5zb2NrZXQub24oXCJkZWxldGUgcGxheWVyXCIsIGZ1bmN0aW9uKGRlbGV0ZWRQbGF5ZXJJRCkge1xyXG4gICAgICBpZiAoZGVsZXRlZFBsYXllcklEICE9PSBzdGF0ZS5pZCkge1xyXG4gICAgICAgIHZhciB0aGlzT25lID0gc3RhdGUub3RoZXJQbGF5ZXJzLmdldENoaWxkcmVuKCkuZmluZChmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5pZCA9PT0gZGVsZXRlZFBsYXllcklEO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXNPbmUuZGVzdHJveSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnNvY2tldC5vbihcImNvbm5lY3RcIiwgZnVuY3Rpb24oaW5pdGlhbERhdGEpIHtcclxuICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCcpXHJcbiAgICAgIHN0YXRlLmlkID0gc29ja2V0LmlkO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICB0aGlzLnNvY2tldC5vbihcInVwZGF0ZVwiLCBmdW5jdGlvbihwbGF5ZXIpIHtcclxuICAgICAgdmFyIG1vdmluZyA9IGZhbHNlO1xyXG4gICAgICBpZiAocGxheWVyLmlkICE9PSBzdGF0ZS5teVBsYXllci5pZCkge1xyXG4gICAgICAgIHZhciB0aGlzT25lID0gc3RhdGUub3RoZXJQbGF5ZXJzLmdldENoaWxkcmVuKCkuZmluZChmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5pZCA9PT0gcGxheWVyLmlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpc09uZSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgaWYodGhpc09uZS5oZWFsdGg8MCl7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuc2V0QW5pbWF0aW9uKCdkZWF0aCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodGhpc09uZS54ICE9PSBwbGF5ZXIueCB8fCB0aGlzT25lLnkgIT09IHBsYXllci55KSB7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuc2V0UG9zaXRpb24ocGxheWVyLngsIHBsYXllci55KTtcclxuICAgICAgICAgICAgbW92aW5nID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChwbGF5ZXIuYXR0YWNraW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuc2V0QW5pbWF0aW9uKFwic2xhc2hcIik7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuYXR0YWNraW5nID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAocGxheWVyLmJsb2NraW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuc2V0QW5pbWF0aW9uKFwiYmxvY2tcIik7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuYmxvY2tpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChtb3ZpbmcpIHtcclxuICAgICAgICAgICAgdGhpc09uZS5hdHRhY2tpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpc09uZS5ibG9ja2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzT25lLnNldEFuaW1hdGlvbihcIndhbGtcIik7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzT25lLmF0dGFja2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzT25lLmJsb2NraW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXNPbmUuc2V0QW5pbWF0aW9uKFwiaWRsZVwiKTtcclxuICAgICAgICAgIH1cclxuICBcclxuICAgICAgICAgIGlmICh0aGlzT25lLmZsaXBTdGF0ZSAhPT0gcGxheWVyLmZsaXBTdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzT25lLmZsaXBTdGF0ZSA9IHBsYXllci5mbGlwU3RhdGU7XHJcbiAgICAgICAgICAgIHRoaXNPbmUudG9nZ2xlRmxpcFgoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIFxyXG4gICAgdGhpcy5zb2NrZXQub24oXCJhdHRhY2tcIiwgZnVuY3Rpb24ocGxheWVyKSB7fSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBleHBvcnQgY29uc3QgU29ja2V0TGlzdGVuZXJzID0gZnVuY3Rpb24oc29ja2V0LCBzdGF0ZSkge1xyXG4gIFxyXG4vLyB9O1xyXG4iLCJleHBvcnQgdmFyIHR3ZWVuc0xpYnJhcnkgPSB7XHJcbiAgICBzZXRLbm9ja0JhY2tUd2VlbjogZnVuY3Rpb24odGFyZ2V0KXtcclxuICAgICAgICB0YXJnZXQua25vY2tiYWNrID0gdGhpcy50d2VlbnMuYWRkKHtcclxuICAgICAgICAgIHRhcmdldHM6IHRhcmdldCxcclxuICAgICAgICAgIHg6IHtcclxuICAgICAgICAgICAgdmFsdWU6ICgpID0+IHRhcmdldC54ICsgdGFyZ2V0Lmtub2NrYmFja0Rpc3RhbmNlLFxyXG4gICAgICAgICAgICBlYXNlOiBcIlBvd2VyMVwiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgIHBhdXNlZDogdHJ1ZSxcclxuICAgICAgICAgIG9uQ29tcGxldGU6ICgpPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhdHRlbXB0aW5nIHRvIHJlc2V0IHR3ZWVuJylcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGFyZ2V0KTtcclxuICAgICAgICAgICAgdGFyZ2V0LnNldEtub2NrQmFja1R3ZWVuKHRhcmdldCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG59IiwiaW1wb3J0IHNvY2tldENvbnRyb2xsZXIgZnJvbSAnLi4vc29ja2V0Q29udHJvbGxlcic7XHJcbmltcG9ydCB7IHR3ZWVuc0xpYnJhcnkgfSBmcm9tICcuLi9Ud2VlbnMvdHdlZW5zJztcclxuXHJcbmV4cG9ydCBjb25zdCBQbGF5ZXIgPSBuZXcgUGhhc2VyLkNsYXNzKHtcclxuICBFeHRlbmRzOiBQaGFzZXIuR2FtZU9iamVjdHMuU3ByaXRlLFxyXG5cclxuICBpbml0aWFsaXplOiBmdW5jdGlvbiBQbGF5ZXIoc2NlbmUpIHtcclxuICAgIFBoYXNlci5HYW1lT2JqZWN0cy5TcHJpdGUuY2FsbCh0aGlzLCBzY2VuZSwgMCwgMCwgXCJub3RoaW5nXCIpO1xyXG4gICAgdGhpcy5zZXRBY3RpdmUodHJ1ZSk7XHJcbiAgICB0aGlzLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICB0aGlzLmtleSA9IFwiaWRsZVwiO1xyXG4gICAgdGhpcy5oZWFsdGggPSAxMDA7XHJcbiAgICB0aGlzLmtub2NrQmFja0Rpc3RhbmNlID0gNTA7XHJcbiAgICB0aGlzLmZsaXBTdGF0ZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5hdHRhY2tpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuYmxvY2tpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMubW92aW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLmluanVyZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuc2V0S25vY2tCYWNrVHdlZW4gPSB0d2VlbnNMaWJyYXJ5LnNldEtub2NrQmFja1R3ZWVuLmJpbmQoc2NlbmUpO1xyXG4gICAgdGhpcy5rbm9ja2JhY2sgPSB0aGlzLnNldEtub2NrQmFja1R3ZWVuKHRoaXMpO1xyXG4gIH0sXHJcblxyXG4gIHNldEluaXRpYWxQb3NpdGlvbjogZnVuY3Rpb24oeCwgeSwgaWQpIHtcclxuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgfSxcclxuXHJcbiAgc2V0TmV3UG9zaXRpb246IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgfSxcclxuXHJcbiAgc2V0QW5pbWF0aW9uOiBmdW5jdGlvbihrZXkpIHtcclxuICAgIGlmICh0aGlzLmtleSAhPT0ga2V5KSB7XHJcbiAgICAgIHRoaXMucGxheShrZXkpO1xyXG4gICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICB0YWtlRGFtYWdlOiBmdW5jdGlvbihkYW1hZ2UpIHtcclxuICAgIHRoaXMuaGVhbHRoIC09IGRhbWFnZTtcclxuICB9LFxyXG5cclxuICBmbGlwOiBmdW5jdGlvbihuZXdGbGlwU3RhdGUsIHNvY2tldCkge1xyXG4gICAgaWYgKG5ld0ZsaXBTdGF0ZSAhPT0gdGhpcy5mbGlwU3RhdGUpIHtcclxuICAgICAgdGhpcy5mbGlwU3RhdGUgPSBuZXdGbGlwU3RhdGU7XHJcbiAgICAgIHRoaXMudG9nZ2xlRmxpcFgoKTtcclxuICAgICAgc29ja2V0LmVtaXQoXCJmbGlwXCIsIHsgaWQ6IHRoaXMuaWQsIGZsaXBTdGF0ZTogdGhpcy5mbGlwU3RhdGUgfSk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgXHJcblxyXG4gIHVwZGF0ZUFuaW1hdGlvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMuYXR0YWNraW5nKSB7XHJcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwic2xhc2hcIik7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuYmxvY2tpbmcpIHtcclxuICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJibG9ja1wiKTtcclxuICAgICAgLy8gYmxvY2tDb2xsaWRlcihteVBsYXllcik7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubW92aW5nKSB7XHJcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwid2Fsa1wiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKFwiaWRsZVwiKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICB1cGRhdGVTZXJ2ZXJXaXRoUG9zaXRpb24oc29ja2V0KXtcclxuICAgIHNvY2tldC5lbWl0KFwibW92ZSBwbGF5ZXJcIiwge1xyXG4gICAgICB4OiB0aGlzLngsXHJcbiAgICAgIHk6IHRoaXMueSxcclxuICAgICAgaWQ6IHRoaXMuaWRcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZTogZnVuY3Rpb24oc29ja2V0KSB7XHJcbiAgICB0aGlzLnVwZGF0ZUFuaW1hdGlvbnMoKTtcclxuICAgIHRoaXMudXBkYXRlU2VydmVyV2l0aFBvc2l0aW9uKHNvY2tldCk7XHJcbiAgfVxyXG59KTtcclxuIiwibGV0IEtuaWdodEFuaW1hdGlvbnMgPSB7fTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEtuaWdodEFuaW1hdGlvbnMgPSB7XHJcbiAgICBsb2FkKGNvbnRleHQpe1xyXG4gICAgICAgIGNvbnRleHQubG9hZC5zcHJpdGVzaGVldChcImlkbGluZ1wiLCBcImFzc2V0cy9rbmlnaHQvaWRsZS5wbmdcIiwge1xyXG4gICAgICAgICAgICBmcmFtZVdpZHRoOiA0MixcclxuICAgICAgICAgICAgZnJhbWVIZWlnaHQ6IDQyLFxyXG4gICAgICAgICAgICBlbmRGcmFtZTogNFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxvYWQuc3ByaXRlc2hlZXQoXCJ3YWxraW5nXCIsIFwiYXNzZXRzL2tuaWdodC93YWxrLnBuZ1wiLCB7XHJcbiAgICAgICAgICAgIGZyYW1lV2lkdGg6IDQyLFxyXG4gICAgICAgICAgICBmcmFtZUhlaWdodDogNDIsXHJcbiAgICAgICAgICAgIGVuZEZyYW1lOiA4XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnRleHQubG9hZC5zcHJpdGVzaGVldChcInNsYXNoaW5nXCIsIFwiYXNzZXRzL2tuaWdodC9zbGFzaC5wbmdcIiwge1xyXG4gICAgICAgICAgICBmcmFtZVdpZHRoOiA0MixcclxuICAgICAgICAgICAgZnJhbWVIZWlnaHQ6IDQyLFxyXG4gICAgICAgICAgICBlbmRGcmFtZTogMTBcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgY29udGV4dC5sb2FkLnNwcml0ZXNoZWV0KFwiYmxvY2tpbmdcIiwgXCJhc3NldHMva25pZ2h0L2Jsb2NrLnBuZ1wiLCB7XHJcbiAgICAgICAgICAgIGZyYW1lV2lkdGg6IDQyLFxyXG4gICAgICAgICAgICBmcmFtZUhlaWdodDogNDIsXHJcbiAgICAgICAgICAgIGVuZEZyYW1lOiA3XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnRleHQubG9hZC5zcHJpdGVzaGVldChcImRpZWluZ1wiLCBcImFzc2V0cy9rbmlnaHQvZGVhdGgucG5nXCIsIHtcclxuICAgICAgICAgICAgZnJhbWVXaWR0aDogNDIsXHJcbiAgICAgICAgICAgIGZyYW1lSGVpZ2h0OiA0MixcclxuICAgICAgICAgICAgZW5kRnJhbWU6IDlcclxuICAgICAgICAgIH0pXHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZShjb250ZXh0KXtcclxuICAgICAgICBjb250ZXh0LmFuaW1zLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgIGtleTogXCJpZGxlXCIsXHJcbiAgICAgICAgICAgIGZyYW1lczogY29udGV4dC5hbmltcy5nZW5lcmF0ZUZyYW1lTnVtYmVycyhcImlkbGluZ1wiLCB7IHN0YXJ0OiAwLCBlbmQ6IDMgfSksXHJcbiAgICAgICAgICAgIGZyYW1lUmF0ZTogMixcclxuICAgICAgICAgICAgcmVwZWF0OiAtMVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICBjb250ZXh0LmFuaW1zLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgIGtleTogXCJ3YWxrXCIsXHJcbiAgICAgICAgICAgIGZyYW1lczogY29udGV4dC5hbmltcy5nZW5lcmF0ZUZyYW1lTnVtYmVycyhcIndhbGtpbmdcIiwgeyBzdGFydDogMCwgZW5kOiA3IH0pLFxyXG4gICAgICAgICAgICBmcmFtZVJhdGU6IDI0LFxyXG4gICAgICAgICAgICByZXBlYXQ6IC0xXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAgIGNvbnRleHQuYW5pbXMuY3JlYXRlKHtcclxuICAgICAgICAgICAga2V5OiBcInNsYXNoXCIsXHJcbiAgICAgICAgICAgIGZyYW1lczogY29udGV4dC5hbmltcy5nZW5lcmF0ZUZyYW1lTnVtYmVycyhcInNsYXNoaW5nXCIsIHsgc3RhcnQ6IDAsIGVuZDogOSB9KSxcclxuICAgICAgICAgICAgZnJhbWVSYXRlOiAyNCxcclxuICAgICAgICAgICAgcmVwZWF0OiAtMVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICBjb250ZXh0LmFuaW1zLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgIGtleTogXCJibG9ja1wiLFxyXG4gICAgICAgICAgICBmcmFtZXM6IGNvbnRleHQuYW5pbXMuZ2VuZXJhdGVGcmFtZU51bWJlcnMoXCJibG9ja2luZ1wiLCB7IHN0YXJ0OiAwLCBlbmQ6IDYgfSksXHJcbiAgICAgICAgICAgIGZyYW1lUmF0ZTogMjRcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGNvbnRleHQuYW5pbXMuY3JlYXRlKHtcclxuICAgICAgICAgICAga2V5OiBcImRlYXRoXCIsXHJcbiAgICAgICAgICAgIGZyYW1lczogY29udGV4dC5hbmltcy5nZW5lcmF0ZUZyYW1lTnVtYmVycyhcImRpZWluZ1wiLCB7c3RhcnQ6IDAsIGVuZDogOH0pLFxyXG4gICAgICAgICAgICBmcmFtZVJhdGU6IDI0XHJcbiAgICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLyBnYW1lIHN0YXRlIGNvbnN0cnVjdG9yXHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuL0dhbWVPYmplY3RzL1BsYXllclwiO1xyXG5pbXBvcnQgeyB0d2VlbnNMaWJyYXJ5IH0gZnJvbSBcIi4vVHdlZW5zL3R3ZWVuc1wiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgU3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmlkID0gXCJcIjtcclxuICB0aGlzLnggPSAyMDA7XHJcbiAgdGhpcy55ID0gMjAwO1xyXG4gIHRoaXMuYXR0YWNrVGltZXIgPSBudWxsO1xyXG4gIHRoaXMuaW5pdGlhbE90aGVyUGxheWVycyA9IFtdO1xyXG4gIHRoaXMub3RoZXJQbGF5ZXJzID0ge307XHJcbiAgdGhpcy5wbGF5ZXIgPSB7fTtcclxuICB0aGlzLm15UGxheWVyID0ge307XHJcbiAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcclxuICB0aGlzLmhlYWx0aCA9IDEwMDtcclxuICB0aGlzLmF0dGFjayA9IGZhbHNlO1xyXG4gIHRoaXMuYmxvY2sgPSBmYWxzZTtcclxuICB0aGlzLmRpc2FibGVJbnB1dCA9IGZhbHNlO1xyXG4gIHRoaXMua25vY2tiYWNrID0gbnVsbDtcclxuICB0aGlzLmtleXMgPSB7fTtcclxuXHJcblxyXG4gIHRoaXMudXBkYXRlUG9zaXRpb24gPSAoeCwgeSkgPT4ge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pbml0aWFsaXplID0gKGNvbnRleHQsIHNvY2tldCkgPT4ge1xyXG4gICAgdGhpcy5pbml0aWFsaXplUGxheWVyKGNvbnRleHQsIHNvY2tldCk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVPdGhlclBsYXllcnMoY29udGV4dCwgc29ja2V0KTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUtleXMoY29udGV4dCk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmluaXRpYWxpemVLZXlzID0gKGNvbnRleHQpID0+IHtcclxuICAgIHRoaXMua2V5cy5XID0gY29udGV4dC5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLklucHV0LktleWJvYXJkLktleUNvZGVzLlcpO1xyXG4gICAgdGhpcy5rZXlzLkEgPSBjb250ZXh0LmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuSW5wdXQuS2V5Ym9hcmQuS2V5Q29kZXMuQSk7XHJcbiAgICB0aGlzLmtleXMuUyA9IGNvbnRleHQuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5JbnB1dC5LZXlib2FyZC5LZXlDb2Rlcy5TKTtcclxuICAgIHRoaXMua2V5cy5EID0gY29udGV4dC5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLklucHV0LktleWJvYXJkLktleUNvZGVzLkQpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5pbml0aWFsaXplUGxheWVyID0gKGNvbnRleHQsIHNvY2tldCkgPT4ge1xyXG4gICAgbGV0IGtub2NrYmFja3R3ZWVuID0gdHdlZW5zTGlicmFyeS5zZXRLbm9ja0JhY2tUd2Vlbi5iaW5kKGNvbnRleHQpO1xyXG4gICAgdGhpcy5wbGF5ZXIgPSBjb250ZXh0LnBoeXNpY3MuYWRkLmdyb3VwKHtcclxuICAgICAgY2xhc3NUeXBlOiBQbGF5ZXIsXHJcbiAgICAgIG1heFNpemU6IDEsXHJcbiAgICAgIGNvbGxpZGVXb3JsZEJvdW5kczogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5teVBsYXllcj10aGlzLnBsYXllci5nZXQoKTtcclxuICAgIHRoaXMubXlQbGF5ZXIucGxheShcImlkbGVcIik7XHJcbiAgICB0aGlzLm15UGxheWVyLnNldEluaXRpYWxQb3NpdGlvbih0aGlzLngsIHRoaXMueSwgc29ja2V0LmlkKTtcclxuICAgIGtub2NrYmFja3R3ZWVuKHRoaXMubXlQbGF5ZXIpO1xyXG4gICAgc29ja2V0LmVtaXQoXCJjcmVhdGUgcGxheWVyXCIsIHtcclxuICAgICAgeDogdGhpcy5teVBsYXllci54LFxyXG4gICAgICB5OiB0aGlzLm15UGxheWVyLnksXHJcbiAgICAgIGhlYWx0aDogdGhpcy5teVBsYXllci5oZWFsdGgsXHJcbiAgICAgIGlkOiBzb2NrZXQuaWRcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuaW5pdGlhbGl6ZU90aGVyUGxheWVycyA9IGNvbnRleHQgPT4ge1xyXG4gICAgdGhpcy5vdGhlclBsYXllcnMgPSBjb250ZXh0LnBoeXNpY3MuYWRkLmdyb3VwKHtcclxuICAgICAgY2xhc3NUeXBlOiBQbGF5ZXIsXHJcbiAgICAgIG1heFNpemU6IDEwMCxcclxuICAgICAgYm91bmNlWDogMSxcclxuICAgICAgY29sbGlkZVdvcmxkQm91bmRzOiB0cnVlXHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCB0cnlIYXJkbWFwID0ge1xyXG4gICAgbG9hZDogKGNvbnRleHQpID0+IHtcclxuICAgICAgY29udGV4dC5sb2FkLnRpbGVtYXBUaWxlZEpTT04oXCJtYXBcIiwgXCJhc3NldHMvbWFwL3RyeWhhcmQuanNvblwiKTtcclxuICAgICAgY29udGV4dC5sb2FkLnNwcml0ZXNoZWV0KFwiYmFja2dyb3VuZFwiLCBcImFzc2V0cy9tYXAvYXNzZXRzL2JhY2tncm91bmQucG5nXCIsIHtcclxuICAgICAgICBmcmFtZVdpZHRoOiA4LFxyXG4gICAgICAgIGZyYW1lSGVpZ2h0OiA4XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb250ZXh0LmxvYWQuc3ByaXRlc2hlZXQoXCJibHVlX2dlbmVyaWNcIiwgXCJhc3NldHMvbWFwL2Fzc2V0cy9ibHVlX2dlbmVyaWMucG5nXCIsIHtcclxuICAgICAgICBmcmFtZVdpZHRoOiA4LFxyXG4gICAgICAgIGZyYW1lSGVpZ2h0OiA4XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGU6IChjb250ZXh0KSA9PiB7XHJcbiAgICAgICAgY29udGV4dC5tYXAgPSBjb250ZXh0Lm1ha2UudGlsZW1hcCh7IGtleTogXCJtYXBcIiB9KTtcclxuICAgICAgICBjb250ZXh0Lm1haW5UaWxlU2V0ID0gY29udGV4dC5tYXAuYWRkVGlsZXNldEltYWdlKFwiYmx1ZV9nZW5lcmljXCIpO1xyXG4gICAgICAgIGNvbnRleHQuQmFja2dyb3VuZFRpbGVTZXQgPSBjb250ZXh0Lm1hcC5hZGRUaWxlc2V0SW1hZ2UoXCJibHVlX2dlbmVyaWNcIik7XHJcbiAgICAgICAgY29udGV4dC5pbWFnZV9iYWNrZ3JvdW5kVGlsZVNldCA9IGNvbnRleHQubWFwLmFkZFRpbGVzZXRJbWFnZShcImJhY2tncm91bmRcIik7XHJcbiAgICAgICAgY29udGV4dC5pbWFnZV9iYWNrZ3JvdW5kTGF5ZXIgPSBjb250ZXh0Lm1hcC5jcmVhdGVEeW5hbWljTGF5ZXIoXHJcbiAgICAgICAgICBcImltYWdlX2JhY2tncm91bmRcIixcclxuICAgICAgICAgIGNvbnRleHQuaW1hZ2VfYmFja2dyb3VuZFRpbGVTZXQsXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29udGV4dC5CYWNrZ3JvdW5kTGF5ZXIgPSBjb250ZXh0Lm1hcC5jcmVhdGVEeW5hbWljTGF5ZXIoXHJcbiAgICAgICAgICBcIkJhY2tncm91bmRcIixcclxuICAgICAgICAgIGNvbnRleHQuQmFja2dyb3VuZFRpbGVTZXQsXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29udGV4dC5tYWluTGF5ZXIgPSBjb250ZXh0Lm1hcC5jcmVhdGVEeW5hbWljTGF5ZXIoXCJNQUlOXCIsIGNvbnRleHQubWFpblRpbGVTZXQsIDAsIDApO1xyXG4gICAgICBcclxuICAgICAgICBjb250ZXh0Lm1haW5MYXllci5zZXRDb2xsaXNpb25CeUV4Y2x1c2lvbihbLTFdKTtcclxuICAgICAgXHJcbiAgICAgICAgLy8gYm91bmRzXHJcbiAgICAgICAgY29udGV4dC5waHlzaWNzLndvcmxkLmJvdW5kcy53aWR0aCA9IGNvbnRleHQubWFpbkxheWVyLndpZHRoO1xyXG4gICAgICAgIGNvbnRleHQucGh5c2ljcy53b3JsZC5ib3VuZHMuaGVpZ2h0ID0gY29udGV4dC5tYWluTGF5ZXIuaGVpZ2h0O1xyXG4gICAgfVxyXG59IiwiLy8gaW1wb3J0IFwicGhhc2VyXCI7XHJcbi8vIGltcG9ydCBcIi4vc29ja2V0Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9HYW1lT2JqZWN0cy9QbGF5ZXJcIjtcclxuaW1wb3J0ICBLbmlnaHRBbmltYXRpb25zICBmcm9tICcuL0FuaW1hdGlvbnMva25pZ2h0QW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4vc3RhdGVcIjtcclxuaW1wb3J0IHsgU29ja2V0Q29udHJvbGxlciB9IGZyb20gXCIuL3NvY2tldENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgdHJ5SGFyZG1hcCB9IGZyb20gXCIuL01hcHMvdHJ5SGFyZE1hcFwiO1xyXG5pbXBvcnQgdHdlZW5zIGZyb20gJy4vVHdlZW5zL3R3ZWVucyc7XHJcblxyXG5cclxudmFyIGNvbmZpZyA9IHtcclxuICB0eXBlOiBQaGFzZXIuQVVUTyxcclxuICBwYXJlbnQ6IFwicGhhc2VyLWV4YW1wbGVcIixcclxuICB3aWR0aDogNDAwLFxyXG4gIGhlaWdodDogMzAwLFxyXG4gIHBoeXNpY3M6IHtcclxuICAgIGRlZmF1bHQ6IFwiYXJjYWRlXCIsXHJcbiAgICBhcmNhZGU6IHtcclxuICAgICAgZ3Jhdml0eTogeyB5OiAzMDAgfSxcclxuICAgICAgZGVidWc6IHRydWVcclxuICAgIH1cclxuICB9LFxyXG4gIHNjZW5lOiB7XHJcbiAgICBwcmVsb2FkOiBwcmVsb2FkLFxyXG4gICAgY3JlYXRlOiBjcmVhdGUsXHJcbiAgICB1cGRhdGU6IHVwZGF0ZVxyXG4gIH1cclxufTtcclxuXHJcblxyXG52YXIgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZShjb25maWcpO1xyXG52YXIgc3RhdGUgPSBuZXcgU3RhdGUoKTtcclxudmFyIF90aGlzO1xyXG52YXIgc29ja2V0ID0gaW8oKTtcclxudmFyIHNvY2tldENvbnRyb2xsZXIgPSBuZXcgU29ja2V0Q29udHJvbGxlcihzb2NrZXQpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUSElTIElTIFRIRSBQUkUtTE9BRCBGVU5DVElPTlxyXG4gKi9cclxuZnVuY3Rpb24gcHJlbG9hZCgpIHtcclxuICB0cnlIYXJkbWFwLmxvYWQodGhpcyk7XHJcbiAgS25pZ2h0QW5pbWF0aW9ucy5sb2FkKHRoaXMpO1xyXG59XHJcblxyXG4vKipcclxuICogVEhJUyBJUyBUSEUgQ1JFQVRFIEZVTkNUSU9OXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGUoKSB7XHJcblxyXG4gIHRyeUhhcmRtYXAuY3JlYXRlKHRoaXMpO1xyXG4gIEtuaWdodEFuaW1hdGlvbnMuY3JlYXRlKHRoaXMpO1xyXG5cclxuICBzdGF0ZS5pbml0aWFsaXplKHRoaXMsIHNvY2tldCk7XHJcbiAgdGhpcy5waHlzaWNzLmFkZC5jb2xsaWRlcihzdGF0ZS5teVBsYXllciwgdGhpcy5tYWluTGF5ZXIpO1xyXG4gIHRoaXMucGh5c2ljcy5hZGQuY29sbGlkZXIoc3RhdGUub3RoZXJQbGF5ZXJzLCB0aGlzLm1haW5MYXllcik7XHJcbiAgZ2V0SW5pdGlhbFBsYXllcnMoKTtcclxuICB0aGlzLmNhbWVyYXMubWFpbi5zZXRCb3VuZHMoXHJcbiAgICAwLFxyXG4gICAgMCxcclxuICAgIHRoaXMubWFwLndpZHRoSW5QaXhlbHMsXHJcbiAgICB0aGlzLm1hcC5oZWlnaHRJblBpeGVsc1xyXG4gICk7O1xyXG4gIHRoaXMuY2FtZXJhcy5tYWluLnN0YXJ0Rm9sbG93KHN0YXRlLm15UGxheWVyKTtcclxuXHJcbiAgdGhpcy5pbnB1dC5vbihcInBvaW50ZXJkb3duXCIsIHBvaW50ZXIgPT4ge1xyXG4gICAgaWYgKHBvaW50ZXIuYnV0dG9ucyA9PT0gMSkge1xyXG4gICAgICBzdGF0ZS5teVBsYXllci5hdHRhY2tpbmcgPSB0cnVlO1xyXG4gICAgICBzb2NrZXQuZW1pdChcImF0dGFja1wiLCB7IGlkOiBzdGF0ZS5teVBsYXllci5pZCB9KTtcclxuICAgIH0gZWxzZSBpZiAocG9pbnRlci5idXR0b25zID09PSAyKSB7XHJcbiAgICAgIHN0YXRlLm15UGxheWVyLmJsb2NraW5nID0gdHJ1ZTtcclxuICAgICAgc29ja2V0LmVtaXQoXCJibG9ja1wiLCB7IGlkOiBzdGF0ZS5teVBsYXllci5pZCB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdGhpcy5pbnB1dC5vbihcInBvaW50ZXJ1cFwiLCBmdW5jdGlvbihwb2ludGVyKSB7XHJcbiAgICBzdGF0ZS5teVBsYXllci5hdHRhY2tpbmcgPSBmYWxzZTtcclxuICAgIHN0YXRlLm15UGxheWVyLmJsb2NraW5nID0gZmFsc2U7XHJcbiAgICBzb2NrZXQuZW1pdChcImJsb2NrIHJlbGVhc2VcIiwgeyBpZDogc3RhdGUubXlQbGF5ZXIuaWQgfSk7XHJcbiAgICBzb2NrZXQuZW1pdChcImF0dGFjayByZWxlYXNlXCIsIHsgaWQ6IHN0YXRlLm15UGxheWVyLmlkIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0aGlzLnBoeXNpY3MuYWRkLm92ZXJsYXAoc3RhdGUubXlQbGF5ZXIsIHN0YXRlLm90aGVyUGxheWVycywgcGxheWVyQ29sbGlzaW9uKTtcclxuXHJcblxyXG4gIHNvY2tldENvbnRyb2xsZXIuaW5pdGlhbGl6ZShzdGF0ZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUSElTIElTIFRIRSBVUERBVEUgRlVOQ1RJT05cclxuICovXHJcblxyXG5mdW5jdGlvbiB1cGRhdGUodGltZSwgZGVsdGEpIHtcclxuICBpZihzdGF0ZS5teVBsYXllci5oZWFsdGg8MCkgcmV0dXJuO1xyXG5cclxuICBzdGF0ZS5teVBsYXllci5tb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgLy8ga2V5Ym9hcmQgbGlzdGVuZXJzXHJcbiAgaWYgKHN0YXRlLmtleXMuQS5pc0Rvd24pIHtcclxuICAgIHN0YXRlLnBsYXllci5zZXRWZWxvY2l0eVgoLTE2MCk7XHJcbiAgICBzdGF0ZS5teVBsYXllci5mbGlwKHRydWUsIHNvY2tldCk7XHJcbiAgICBzdGF0ZS5teVBsYXllci5tb3ZpbmcgPSB0cnVlO1xyXG4gIH0gZWxzZSBpZiAoc3RhdGUua2V5cy5ELmlzRG93bikge1xyXG4gICAgc3RhdGUucGxheWVyLnNldFZlbG9jaXR5WCgxNjApO1xyXG4gICAgc3RhdGUubXlQbGF5ZXIuZmxpcChmYWxzZSwgc29ja2V0KTtcclxuICAgIHN0YXRlLm15UGxheWVyLm1vdmluZyA9IHRydWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHN0YXRlLnBsYXllci5zZXRWZWxvY2l0eVgoMCk7XHJcbiAgfVxyXG4gIC8vIEp1bXBcclxuICBpZiAoc3RhdGUua2V5cy5XLmlzRG93biAmJiBzdGF0ZS5teVBsYXllci5ib2R5Lm9uRmxvb3IoKSkge1xyXG4gICAgc3RhdGUucGxheWVyLnNldFZlbG9jaXR5WSgtMjUwKTtcclxuICB9XHJcblxyXG4gIHN0YXRlLm15UGxheWVyLnVwZGF0ZShzb2NrZXQpO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBVVElMIGZ1bmN0aW9uc1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIGdldEluaXRpYWxQbGF5ZXJzKCkge1xyXG4gIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIFwiL2luaXRpYWxpemVcIiwgZmFsc2UpO1xyXG4gIHJlcXVlc3Quc2VuZChudWxsKTtcclxuXHJcbiAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcclxuICAgIHN0YXRlLmluaXRpYWxPdGhlclBsYXllcnMgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2UpO1xyXG4gICAgZm9yICh2YXIga2V5IGluIHN0YXRlLmluaXRpYWxPdGhlclBsYXllcnMpIHtcclxuICAgICAgaWYgKGtleSAhPT0gc3RhdGUubXlQbGF5ZXIuaWQpIHtcclxuICAgICAgICB2YXIgb3RoZXJQbGF5ZXIgPSBzdGF0ZS5vdGhlclBsYXllcnMuZ2V0KCk7XHJcbiAgICAgICAgaWYgKG90aGVyUGxheWVyKSB7XHJcbiAgICAgICAgICBvdGhlclBsYXllci5hbmltcy5wbGF5KFwiaWRsZVwiKTtcclxuICAgICAgICAgIG90aGVyUGxheWVyLnNldEluaXRpYWxQb3NpdGlvbihcclxuICAgICAgICAgICAgc3RhdGUuaW5pdGlhbE90aGVyUGxheWVyc1trZXldLngsXHJcbiAgICAgICAgICAgIHN0YXRlLmluaXRpYWxPdGhlclBsYXllcnNba2V5XS55LFxyXG4gICAgICAgICAgICBrZXlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwbGF5ZXJDb2xsaXNpb24ocGxheWVyLCBvdGhlclBsYXllcikge1xyXG4gIGlmICghcGxheWVyLmluanVyZWQpIHtcclxuICAgIGlmIChvdGhlclBsYXllci5hdHRhY2tpbmcgJiYgIXBsYXllci5ibG9ja2luZykge1xyXG4gICAgICBwbGF5ZXIuaGVhbHRoIC09IDEwO1xyXG4gICAgICBpZiAob3RoZXJQbGF5ZXIuZmxpcFN0YXRlKSB7XHJcbiAgICAgICAgc3RhdGUubXlQbGF5ZXIua25vY2tiYWNrRGlzdGFuY2UgPSAtNTA7XHJcbiAgICAgICAgc3RhdGUubXlQbGF5ZXIua25vY2tiYWNrLnBsYXkoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5teVBsYXllci5rbm9ja2JhY2tEaXN0YW5jZSA9IDUwO1xyXG4gICAgICAgIHN0YXRlLm15UGxheWVyLmtub2NrYmFjay5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgICAgcGxheWVyLmluanVyZWQgPSB0cnVlO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBwbGF5ZXIuaW5qdXJlZCA9IGZhbHNlO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH0gZWxzZSBpZiAob3RoZXJQbGF5ZXIuYXR0YWNraW5nICYmIHBsYXllci5ibG9ja2luZykge1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')}]);